"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[13],{84013:function(e,n,t){t.r(n);var i=t(85893),o=t(41181),r=t(15861),l=t(87357),s=t(38154);n.default=()=>(0,i.jsx)(o.ZP,{container:!0,children:(0,i.jsxs)(o.ZP,{xs:12,children:[(0,i.jsx)(l.Z,{sx:{width:"100%"},children:(0,i.jsx)(r.Z,{variant:"h3",gutterBottom:!0,children:"While과 Loop"})}),(0,i.jsx)(l.Z,{sx:{width:"100%",textAlign:"left",marginTop:"30px"},children:(0,i.jsx)(r.Z,{variant:"body1",gutterBottom:!0,children:"Move는 두 가지 루핑 구조를 제공합니다: while과 loop입니다."})}),(0,i.jsx)(l.Z,{sx:{width:"100%"},children:(0,i.jsx)(r.Z,{variant:"h4",gutterBottom:!0,children:"While반복문"})}),(0,i.jsx)(l.Z,{sx:{width:"100%",textAlign:"left",marginTop:"30px"},children:(0,i.jsx)(r.Z,{variant:"body1",gutterBottom:!0,children:"while 구조는 조건(타입이 bool인 표현식)이 거짓으로 평가될 때까지 본문(타입이 unit인 표현식)을 반복합니다. 다음은 1부터 n까지의 숫자의 합을 계산하는 간단한 while 루프의 예입니다:"})}),(0,i.jsx)(s.Z,{code:"  module example::test {\n    fun sum(n: u64): u64 {\n        let sum = 0;\n        let i = 1;\n        while (i <= n) {\n            sum = sum + i;\n            i = i + 1\n        };\n    \n        sum\n    }\n\n}\n"}),(0,i.jsx)(l.Z,{sx:{width:"100%",textAlign:"left",marginTop:"30px"},children:(0,i.jsx)(r.Z,{variant:"body1",gutterBottom:!0,children:"무한 루프는 허용됩니다:"})}),(0,i.jsx)(s.Z,{code:"  module example::test {\n    fun foo() {\n        while (true) { }\n    }\n}\n"}),(0,i.jsx)(l.Z,{sx:{width:"100%"},children:(0,i.jsx)(r.Z,{variant:"h4",gutterBottom:!0,children:"Break"})}),(0,i.jsx)(l.Z,{sx:{width:"100%",textAlign:"left",marginTop:"30px"},children:(0,i.jsx)(r.Z,{variant:"body1",gutterBottom:!0,children:"break 표현식은 조건이 거짓으로 평가되기 전에 루프를 종료하는 데 사용될 수 있습니다. 예를 들어, 다음 루프는 1보다 큰 n의 가장 작은 인수를 찾기 위해 break를 사용합니다:"})}),(0,i.jsx)(s.Z,{code:"  module example::test {\n    fun smallest_factor(n:u64):u64 {\n        //입력이 0 또는 1이 아닌 것으로 가정합니다.\n        let i = 2;\n        while (i <=n) {\n            if (n % i ==0 )break;\n            i = i + +1\n        }\n        i\n    }\n}\n"}),(0,i.jsx)(l.Z,{sx:{width:"100%",textAlign:"left",marginTop:"30px"},children:(0,i.jsx)(r.Z,{variant:"body1",gutterBottom:!0,children:"break 표현식은 루프 외부에서 사용할 수 없습니다."})})," ",(0,i.jsx)(l.Z,{sx:{width:"100%"},children:(0,i.jsx)(r.Z,{variant:"h4",gutterBottom:!0,children:"continue"})}),(0,i.jsx)(l.Z,{sx:{width:"100%",textAlign:"left",marginTop:"30px"},children:(0,i.jsx)(r.Z,{variant:"body1",gutterBottom:!0,children:"continue 표현식은 루프의 나머지 부분을 건너뛰고 다음 반복으로 진행합니다. 다음 예시의 루프는 숫자가 10으로 나누어떨어지지 않는 경우를 제외하고 1부터 n까지의 합을 계산하기 위해 continue를 사용합니다:"})}),(0,i.jsx)(s.Z,{code:"  module example::test {\n    fun sum_intermediate(n: u64): u64 {\n        let sum = 0;\n        let i = 0;\n        while (i < n) {\n            i = i + 1;\n            if (i % 10 == 0) continue;\n            sum = sum + i;\n        };\n    \n        sum\n    }\n}\n"}),(0,i.jsx)(l.Z,{sx:{width:"100%",textAlign:"left",marginTop:"30px"},children:(0,i.jsx)(r.Z,{variant:"body1",gutterBottom:!0,children:"continue 표현식은 루프 외부에서 사용할 수 없습니다."})}),(0,i.jsx)(l.Z,{sx:{width:"100%"},children:(0,i.jsx)(r.Z,{variant:"h4",gutterBottom:!0,children:"break와 continue의 유형"})}),(0,i.jsx)(l.Z,{sx:{width:"100%",textAlign:"left",marginTop:"30px"},children:(0,i.jsx)(r.Z,{variant:"body1",gutterBottom:!0,children:"break과 continue는 실제로 임의의 타입을 가질 수 있습니다. 다음 예제는 이러한 유연한 타입 지정이 도움이 되는 경우를 보여줍니다:"})}),(0,i.jsx)(s.Z,{code:"  module example::test {\n    fun pop_smallest_while_not_equal(\n        v1: vector<u64>,\n        v2: vector<u64>,\n    ): vector<u64> {\n        let result = vector::empty();\n        while (!vector::is_empty(&v1) && !vector::is_empty(&v2)) {\n            let u1 = *vector::borrow(&v1, vector::length(&v1) - 1);\n            let u2 = *vector::borrow(&v2, vector::length(&v2) - 1);\n            let popped =\n                if (u1 < u2) vector::pop_back(&mut v1)\n                else if (u2 < u1) vector::pop_back(&mut v2)\n                else break;//여기서 break는 u64 타입입니다.\n            vector::push_back(&mut result, popped);\n        };\n    \n        result\n    }\n    \n    \n}\n"}),(0,i.jsx)(s.Z,{code:"  module example::test {\n    fun pick(\n        indexes: vector<u64>,\n        v1: &vector<address>,\n        v2: &vector<address>\n    ): vector<address> {\n        let len1 = vector::length(v1);\n        let len2 = vector::length(v2);\n        let result = vector::empty();\n        while (!vector::is_empty(&indexes)) {\n            let index = vector::pop_back(&mut indexes);\n            let chosen_vector =\n                if (index < len1) v1\n                else if (index < len2) v2\n                else continue; //continue는 &vector<address> 타입입니다\n            vector::push_back(&mut result, *vector::borrow(chosen_vector, index))\n        };\n    \n        result\n    }\n}\n"}),(0,i.jsx)(l.Z,{sx:{width:"100%"},children:(0,i.jsx)(r.Z,{variant:"h4",gutterBottom:!0,children:"Loop 표현식"})}),(0,i.jsx)(l.Z,{sx:{width:"100%",textAlign:"left",marginTop:"30px"},children:(0,i.jsx)(r.Z,{variant:"body1",gutterBottom:!0,children:"루프 표현식은 루프 본문(타입이 ()인 표현식)을 반복해서 실행하며, break를 만날 때까지 계속됩니다. break 없이 루프가 계속되면, 루프는 영원히 계속됩니다."})}),(0,i.jsx)(s.Z,{code:"  module example::test {\n    fun foo() {\n        let i = 0;\n        loop { i = i + 1 }\n    }\n}\n"}),(0,i.jsx)(l.Z,{sx:{width:"100%",textAlign:"left",marginTop:"30px"},children:(0,i.jsx)(r.Z,{variant:"body1",gutterBottom:!0,children:"다음은 루프를 사용하여 합계 함수를 작성하는 예시입니다:"})}),(0,i.jsx)(s.Z,{code:"  module example::test {\n    fun sum(n: u64): u64 {\n        let sum = 0;\n        let i = 0;\n        loop {\n            i = i + 1;\n            if (i > n) break;\n            sum = sum + i\n        };\n    \n        sum\n    }\n}\n"}),(0,i.jsx)(l.Z,{sx:{width:"100%",textAlign:"left",marginTop:"30px"},children:(0,i.jsx)(r.Z,{variant:"body1",gutterBottom:!0,children:"예상하신 대로, continue는 루프 내부에서도 사용할 수 있습니다. 이전에 사용한 while 대신 루프를 사용하여 위의 sum_intermediate 함수를 다시 작성해보겠습니다."})}),(0,i.jsx)(s.Z,{code:"  module example::test {\n    fun sum_intermediate(n: u64): u64 {\n        let sum = 0;\n        let i = 0;\n        loop {\n            i = i + 1;\n            if (i % 10 == 0) continue;\n            if (i > n) break;\n            sum = sum + i\n        };\n    \n        sum\n    }\n}\n"}),(0,i.jsx)(l.Z,{sx:{width:"100%"},children:(0,i.jsx)(r.Z,{variant:"h4",gutterBottom:!0,children:"while과 loop의 타입"})}),(0,i.jsx)(l.Z,{sx:{width:"100%",textAlign:"left",marginTop:"30px"},children:(0,i.jsx)(r.Z,{variant:"body1",gutterBottom:!0,children:"루프는 타입이 있는 표현식입니다. while 표현식은 항상 () 타입을 가집니다."})}),(0,i.jsx)(s.Z,{code:"  module example::test {\n    fun main(){\n        let () = while (i < 10) { i = i + 1 };\n    }\n}\n"}),(0,i.jsx)(l.Z,{sx:{width:"100%",textAlign:"left",marginTop:"30px"},children:(0,i.jsx)(r.Z,{variant:"body1",gutterBottom:!0,children:"만약 루프에 break문이 포함되어 있다면, 해당 표현식은 unit () 타입을 갖습니다."})}),(0,i.jsx)(s.Z,{code:"  module example::test {\n    fun main(){\n        (loop { if (i < 10) i = i + 1 else break }: ());\n        let () = loop { if (i < 10) i = i + 1 else break };\n    }\n}\n"}),(0,i.jsx)(l.Z,{sx:{width:"100%",textAlign:"left",marginTop:"30px"},children:(0,i.jsx)(r.Z,{variant:"body1",gutterBottom:!0,children:"만약 루프에 break문이 없다면, return, abort, break, continue와 마찬가지로 루프는 어떤 타입이든 가질 수 있습니다."})}),(0,i.jsx)(s.Z,{code:"  module example::test {\n    fun main(){\n        (loop (): u64);\n        (loop (): address);\n        (loop (): &vector<vector<u8>>);\n    }\n}\n"})]})})},38154:function(e,n,t){t.d(n,{Z:function(){return d}});var i=t(85893),o=t(74855),r=t(34209),l=t(84283),s=t(90066),u=t(67294);function d(e){let{code:n}=e,[t,d]=(0,u.useState)(!1),[x,a]=(0,u.useState)(!1),[c,h]=(0,u.useState)(!1);return(0,i.jsxs)("div",{style:{position:"relative"},onMouseEnter:()=>{a(!0)},onMouseLeave:()=>{a(!1)},children:[(0,i.jsx)(r.Z,{language:"javascript",style:l.cL,children:n}),(0,i.jsx)(o.CopyToClipboard,{text:n,children:(0,i.jsx)("button",{onClick:()=>{console.log("코드가 복사되었습니다."),d(!0),h(!0),setTimeout(()=>{d(!1),h(!1)},1e3)},style:{position:"absolute",top:"0",right:"0",margin:"8px",padding:"8px",background:"none",border:"none",cursor:"pointer",opacity:x?1:0,transition:"opacity 0.3s",display:"flex",alignItems:"center"},children:c?(0,i.jsx)(s.Z,{style:{color:"#fff",transition:"color 0.3s"}}):(0,i.jsx)(s.Z,{style:{color:t?"#fff":"#000",transition:"color 0.3s"}})})})]})}}}]);