"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[756],{80756:function(e,t,n){n.r(t);var s=n(85893),o=n(41181),r=n(15861),d=n(87357),a=n(38154);t.default=()=>(0,s.jsx)(o.ZP,{container:!0,children:(0,s.jsxs)(o.ZP,{xs:12,children:[(0,s.jsx)(d.Z,{sx:{width:"100%"},children:(0,s.jsx)(r.Z,{variant:"h3",gutterBottom:!0,children:"용도 및 별칭(Uses and Aliases )"})}),(0,s.jsx)(d.Z,{sx:{width:"100%",textAlign:"left",marginTop:"30px"},children:(0,s.jsx)(r.Z,{variant:"body1",gutterBottom:!0,children:"use 문법을 사용하여 다른 모듈의 멤버에 대한 별칭을 생성할 수 있습니다. use는 모듈 전체 또는 특정 표현식 블록 범위에 대해 지속되는 별칭을 생성하는 데 사용할 수 있습니다."})}),(0,s.jsx)(d.Z,{sx:{width:"100%"},children:(0,s.jsx)(r.Z,{variant:"h4",gutterBottom:!0,children:"통사론(Syntax)"})}),(0,s.jsx)(d.Z,{sx:{width:"100%",textAlign:"left",marginTop:"30px"},children:(0,s.jsx)(r.Z,{variant:"body1",gutterBottom:!0,children:"use 문법에는 여러 가지 다른 구문이 있습니다. 가장 간단한 것부터 시작하여 다른 모듈에 대한 별칭을 생성하는 다음과 같은 구문이 있습니다."})}),(0,s.jsx)(a.Z,{code:"  module example::test {\n    use <address>::<module name>;\n    use <address>::<module name> as <module alias name>;\n}\n"}),(0,s.jsx)(a.Z,{code:"  module example::test {\n    use std::vector;\n    use std::vector as V;\n}\n"}),(0,s.jsx)(d.Z,{sx:{width:"100%",textAlign:"left",marginTop:"30px"},children:(0,s.jsx)(r.Z,{variant:"body1",gutterBottom:!0,children:"use std::vector;는 std::vector에 대한 별칭으로서 vector를 도입합니다. 이는 스코프 내에서 사용할 때 std::vector 대신에 vector를 사용할 수 있다는 의미입니다. use std::vector;는 use std::vector as vector;와 동일합니다. 마찬가지로 use std::vector as V;는 std::vector 대신 V를 사용할 수 있게 합니다."})}),(0,s.jsx)(a.Z,{code:"  module examples::test {\n    use std::vector;\n    use std::vector as V;\n\n    fun new_vecs(): (vector<u8>, vector<u8>, vector<u8>) {\n       let v1 = std::vector::empty();\n       let v2 = vector::empty();\n       let v3 = V::empty();\n       (v1, v2, v3)\n    }\n    \n}\n"}),(0,s.jsx)(d.Z,{sx:{width:"100%",textAlign:"left",marginTop:"30px"},children:(0,s.jsx)(r.Z,{variant:"body1",gutterBottom:!0,children:"만약 특정한 모듈 멤버(함수, 구조체, 상수 등)를 가져오고 싶다면 다음과 같은 구문을 사용할 수 있습니다."})}),(0,s.jsx)(a.Z,{code:"  module example::test {\n    use <address>::<module name>::<module member>;\n    use <address>::<module name>::<module member> as <member alias>;\n}\n"}),(0,s.jsx)(a.Z,{code:"  module example::test {\n    use std::vector::empty;\n    use std::vector::empty as empty_vec;\n}\n"}),(0,s.jsx)(d.Z,{sx:{width:"100%",textAlign:"left",marginTop:"30px"},children:(0,s.jsx)(r.Z,{variant:"body1",gutterBottom:!0,children:"이렇게 하면 std::vector::empty 함수를 완전한 한정 없이 사용할 수 있습니다. 대신 각각 empty와 empty_vec을 사용할 수 있습니다. 다시 말하면, use std::vector::empty;는 use std::vector::empty as empty;와 동일합니다."})}),(0,s.jsx)(a.Z,{code:"  module example::test {\n    use std::vector::empty;\n    use std::vector::empty as empty_vec;\n\n    fun new_vecs(): (vector<u8>, vector<u8>, vector<u8>) {\n        let v1 = std::vector::empty();\n        let v2 = empty();\n        let v3 = empty_vec();\n        (v1, v2, v3)\n    }\n}\n"}),(0,s.jsx)(d.Z,{sx:{width:"100%",textAlign:"left",marginTop:"30px"},children:(0,s.jsx)(r.Z,{variant:"body1",gutterBottom:!0,children:"한 번에 여러 모듈 멤버에 대한 별칭을 추가하려면 다음과 같은 구문을 사용할 수 있습니다."})}),(0,s.jsx)(a.Z,{code:"  module example::test {\n    use <address>::<module name>::{<module member>, <module member> as <member alias> ... };\n}\n"}),(0,s.jsx)(a.Z,{code:"  module example::test {\n    use std::vector::{push_back, length as len, pop_back};\n\n    fun swap_last_two<T>(v: &mut vector<T>) {\n        assert!(len(v) >= 2, 42);\n        let last = pop_back(v);\n        let second_to_last = pop_back(v);\n        push_back(v, last);\n        push_back(v, second_to_last)\n    }\n}\n"}),(0,s.jsx)(d.Z,{sx:{width:"100%",textAlign:"left",marginTop:"30px"},children:(0,s.jsx)(r.Z,{variant:"body1",gutterBottom:!0,children:"모듈 멤버에 별칭을 추가하는 것 외에도 모듈 자체에 별칭을 추가해야 할 경우, Self를 사용하여 단일 use문에서 수행할 수 있습니다"})}),(0,s.jsx)(a.Z,{code:"  module example::test {\n    use std::vector::{Self, empty};\n}\n"}),(0,s.jsx)(d.Z,{sx:{width:"100%",textAlign:"left",marginTop:"30px"},children:(0,s.jsx)(r.Z,{variant:"body1",gutterBottom:!0,children:"명확하게 하기 위해, 다음은 모두 동등한 표현입니다:"})}),(0,s.jsx)(a.Z,{code:"  module example::test {\n    use std::vector;\n    use std::vector as vector;\n    use std::vector::Self;\n    use std::vector::Self as vector;\n    use std::vector::{Self};\n    use std::vector::{Self as vector};\n}\n"}),(0,s.jsx)(d.Z,{sx:{width:"100%",textAlign:"left",marginTop:"30px"},children:(0,s.jsx)(r.Z,{variant:"body1",gutterBottom:!0,children:"필요한 경우, 어떤 항목에 대해 원하는 만큼의 별칭을 가질 수 있습니다."})}),(0,s.jsx)(a.Z,{code:"  module example::test {\n    use std::vector::{\n    Self,\n    Self as V,\n    length,\n    length as len,\n};\n\n    fun pop_twice<T>(v: &mut vector<T>): (T, T) {\n        // 위의 use 선언에 따른 모든 옵션 사용 가능\n        assert!(vector::length(v) > 1, 42);\n        assert!(V::length(v) > 1, 42);\n        assert!(length(v) > 1, 42);\n        assert!(len(v) > 1, 42);\n\n        (vector::pop_back(v), vector::pop_back(v))\n    }\n}\n"}),(0,s.jsx)(d.Z,{sx:{width:"100%"},children:(0,s.jsx)(r.Z,{variant:"h4",gutterBottom:!0,children:"모듈의 내부"})}),(0,s.jsx)(d.Z,{sx:{width:"100%",textAlign:"left",marginTop:"30px"},children:(0,s.jsx)(r.Z,{variant:"body1",gutterBottom:!0,children:"모듈 내부에서는 사용 선언의 순서에 관계없이 모든 use 선언을 사용할 수 있습니다."})}),(0,s.jsx)(a.Z,{code:"  address 0x42 {\n    module example {\n        use std::vector;\n    \n        fun example(): vector<u8> {\n            let v = empty();\n            vector::push_back(&mut v, 0);\n            vector::push_back(&mut v, 10);\n            v\n        }\n    \n        use std::vector::empty;\n    }\n    }\n"}),(0,s.jsx)(d.Z,{sx:{width:"100%",textAlign:"left",marginTop:"30px"},children:(0,s.jsx)(r.Z,{variant:"body1",gutterBottom:!0,children:'모듈 내에서 use로 선언된 별칭은 해당 모듈 내에서 사용할 수 있습니다. 또한, 도입된 별칭은 다른 모듈 멤버와 충돌하지 않아야 합니다. 자세한 내용은 "고유성(Uniqueness)"을 참조하십시오.'})}),(0,s.jsx)(d.Z,{sx:{width:"100%"},children:(0,s.jsx)(r.Z,{variant:"h4",gutterBottom:!0,children:"표현식 내부"})}),(0,s.jsx)(d.Z,{sx:{width:"100%",textAlign:"left",marginTop:"30px"},children:(0,s.jsx)(r.Z,{variant:"body1",gutterBottom:!0,children:"use 선언을 어떤 표현식 블록의 시작 부분에 추가할 수 있습니다."})}),(0,s.jsx)(a.Z,{code:"  module example::test {\n    fun example(): vector<u8> {\n        use std::vector::{empty, push_back};\n\n        let v = empty();\n        push_back(&mut v, 0);\n        push_back(&mut v, 10);\n        v\n    }\n}\n"}),(0,s.jsx)(d.Z,{sx:{width:"100%",textAlign:"left",marginTop:"30px"},children:(0,s.jsx)(r.Z,{variant:"body1",gutterBottom:!0,children:"let과 마찬가지로, 표현식 블록에서 use로 도입된 별칭은 해당 블록의 끝에서 제거됩니다."})}),(0,s.jsx)(a.Z,{code:"  module example::test {\n    fun example(): vector<u8> {\n        let result = {\n            use std::vector::{empty, push_back};\n            let v = empty();\n            push_back(&mut v, 0);\n            push_back(&mut v, 10);\n            v\n        };\n        result\n    }\n}\n"}),(0,s.jsx)(d.Z,{sx:{width:"100%",textAlign:"left",marginTop:"30px"},children:(0,s.jsx)(r.Z,{variant:"body1",gutterBottom:!0,children:"블록이 끝난 후에 별칭을 사용하려고 시도하면 오류가 발생합니다."})}),(0,s.jsx)(a.Z,{code:"  module example::test {\n    fun example(): vector<u8> {\n    let result = {\n        use std::vector::{empty, push_back};\n        let v = empty();\n        push_back(&mut v, 0);\n        push_back(&mut v, 10);\n        v\n    };\n    let v2 = empty(); //오류\n//           ^^^^^ 바운드되지 않은 함수 'empty'\n    result\n}\n}\n"}),(0,s.jsx)(d.Z,{sx:{width:"100%",textAlign:"left",marginTop:"30px"},children:(0,s.jsx)(r.Z,{variant:"body1",gutterBottom:!0,children:"use 문은 블록 내에서 첫 번째 항목이어야 합니다. use 문이 표현식이나 let 문 뒤에 나오면 구문 분석 오류가 발생합니다."})}),(0,s.jsx)(a.Z,{code:"  module example::test {\n    {\n    let x = 0;\n    use std::vector; // 오류!\n    let v = vector::empty();\n}\n}\n"}),(0,s.jsx)(d.Z,{sx:{width:"100%"},children:(0,s.jsx)(r.Z,{variant:"h4",gutterBottom:!0,children:"이름 지정 규칙"})}),(0,s.jsx)(d.Z,{sx:{width:"100%",textAlign:"left",marginTop:"30px"},children:(0,s.jsx)(r.Z,{variant:"body1",gutterBottom:!0,children:"별칭은 다른 모듈 멤버와 동일한 규칙을 따라야 합니다. 즉, 구조체나 상수에 대한 별칭은 A부터 Z로 시작해야 합니다."})}),(0,s.jsx)(a.Z,{code:"  address 0x42 {\n    module data {\n        struct S {}\n        const FLAG: bool = false;\n        fun foo() {}\n    }\n    module example {\n        use 0x42::data::{\n            S as s, // 오류!\n            FLAG as fLAG, // 오류!\n            foo as FOO,  // 유효\n            foo as bar, // 유효\n        };\n    }\n    }\n"}),(0,s.jsx)(d.Z,{sx:{width:"100%"},children:(0,s.jsxs)(r.Z,{variant:"h4",gutterBottom:!0,children:["고유성"," "]})}),(0,s.jsx)(d.Z,{sx:{width:"100%",textAlign:"left",marginTop:"30px"},children:(0,s.jsx)(r.Z,{variant:"body1",gutterBottom:!0,children:"주어진 스코프 내에서 use 선언에 의해 도입된 모든 별칭은 고유해야 합니다. 모듈의 경우, use에 의해 도입된 별칭은 서로 겹치지 않아야 합니다."})}),(0,s.jsx)(a.Z,{code:"  module example::test {\n    use std::vector::{empty as foo, length as foo}; // ERROR!\n//                                             ^^^ 중복된 'foo'\n\n\n   use std::vector::empty as bar;\n\n   use std::vector::length as bar; // 오류!\n   //                         ^^^ 중복된 'bar'\n\n}\n"}),(0,s.jsx)(d.Z,{sx:{width:"100%",textAlign:"left",marginTop:"30px"},children:(0,s.jsx)(r.Z,{variant:"body1",gutterBottom:!0,children:"또한, 모듈의 다른 멤버와도 겹치지 않아야 합니다."})}),(0,s.jsx)(a.Z,{code:"  module example::test {\n    use std::vector::{empty as foo, length as foo}; // ERROR!\n//                                             ^^^ 중복된 'foo'\n\n\n   use std::vector::empty as bar;\n\n   use std::vector::length as bar; // 오류!\n   //                         ^^^ 중복된 'bar'\n\n}\n"}),(0,s.jsx)(d.Z,{sx:{width:"100%",textAlign:"left",marginTop:"30px"},children:(0,s.jsx)(r.Z,{variant:"body1",gutterBottom:!0,children:"표현식 블록 내에서는 별칭끼리 겹치면 안 되지만, 외부 스코프에서의 다른 별칭이나 이름을 가려서 사용할 수 있습니다."})}),(0,s.jsx)(d.Z,{sx:{width:"100%"},children:(0,s.jsx)(r.Z,{variant:"h4",gutterBottom:!0,children:"Shadowing"})}),(0,s.jsx)(d.Z,{sx:{width:"100%",textAlign:"left",marginTop:"30px"},children:(0,s.jsx)(r.Z,{variant:"body1",gutterBottom:!0,children:"표현식 블록 내에서 사용된 use 별칭은 외부 스코프의 이름(모듈 멤버 또는 별칭)을 가려서 사용할 수 있습니다. 로컬 변수의 가려짐과 마찬가지로, 가려짐은 표현식 블록의 끝에서 끝납니다."})}),(0,s.jsx)(a.Z,{code:"  address 0x42 {\n    module example {\n    \n        struct WrappedVector { vec: vector<u64> }\n    \n        fun empty(): WrappedVector {\n            WrappedVector { vec: std::vector::empty() }\n        }\n    \n        fun example1(): (WrappedVector, WrappedVector) {\n            let vec = {\n                use std::vector::{empty, push_back};\n                // 'empty'는 이제 std::vector::empty을 가리킵니다.\n    \n                let v = empty();\n                push_back(&mut v, 0);\n                push_back(&mut v, 1);\n                push_back(&mut v, 10);\n                v\n            };\n            // 'empty'는 이제 Self::empty을 가리킵니다.\n            (empty(), WrappedVector { vec })\n        }\n    \n        fun example2(): (WrappedVector, WrappedVector) {\n            use std::vector::{empty, push_back};\n            let w: WrappedVector = {\n                use 0x42::example::empty;\n                empty()\n            };\n            push_back(&mut w.vec, 0);\n            push_back(&mut w.vec, 1);\n            push_back(&mut w.vec, 10);\n    \n            let vec = empty();\n            push_back(&mut vec, 0);\n            push_back(&mut vec, 1);\n            push_back(&mut vec, 10);\n    \n            (w, WrappedVector { vec })\n        }\n    }\n    }\n"}),(0,s.jsx)(d.Z,{sx:{width:"100%"},children:(0,s.jsx)(r.Z,{variant:"h4",gutterBottom:!0,children:"사용되지 않은 use 문 또는 별칭"})}),(0,s.jsx)(d.Z,{sx:{width:"100%",textAlign:"left",marginTop:"30px"},children:(0,s.jsx)(r.Z,{variant:"body1",gutterBottom:!0,children:"사용되지 않는 use 문은 오류를 발생시킵니다."})}),(0,s.jsx)(a.Z,{code:"  module example::test {\n    use std::vector::{empty, push_back}; // ERROR!\n    //                       ^^^^^^^^^ 사용되지 않은 별칭 'push_back'\n\n    fun example(): vector<u8> {\n        empty()\n    }\n}\n"})]})})},38154:function(e,t,n){n.d(t,{Z:function(){return c}});var s=n(85893),o=n(74855),r=n(34209),d=n(84283),a=n(90066),l=n(67294);function c(e){let{code:t}=e,[n,c]=(0,l.useState)(!1),[u,i]=(0,l.useState)(!1),[m,x]=(0,l.useState)(!1);return(0,s.jsxs)("div",{style:{position:"relative"},onMouseEnter:()=>{i(!0)},onMouseLeave:()=>{i(!1)},children:[(0,s.jsx)(r.Z,{language:"javascript",style:d.cL,children:t}),(0,s.jsx)(o.CopyToClipboard,{text:t,children:(0,s.jsx)("button",{onClick:()=>{console.log("코드가 복사되었습니다."),c(!0),x(!0),setTimeout(()=>{c(!1),x(!1)},1e3)},style:{position:"absolute",top:"0",right:"0",margin:"8px",padding:"8px",background:"none",border:"none",cursor:"pointer",opacity:u?1:0,transition:"opacity 0.3s",display:"flex",alignItems:"center"},children:m?(0,s.jsx)(a.Z,{style:{color:"#fff",transition:"color 0.3s"}}):(0,s.jsx)(a.Z,{style:{color:n?"#fff":"#000",transition:"color 0.3s"}})})})]})}}}]);