(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[405],{48312:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/",function(){return t(30094)}])},30094:function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return q}});var s=t(85893),x=t(67294),r=t(79713),l=t(39998),i=t(40044),o=t(87357),d=t(15861),c=t(45697),a=t.n(c),h=()=>(0,s.jsxs)(r.Z,{container:!0,children:[(0,s.jsx)(r.Z,{xs:12,children:(0,s.jsx)(o.Z,{sx:{width:"100%"},children:(0,s.jsx)(d.Z,{variant:"h3",gutterBottom:!0,children:"\uD83E\uDDD0What is Move?"})})}),(0,s.jsx)(r.Z,{xs:12,children:(0,s.jsxs)(o.Z,{sx:{width:"100%",textAlign:"left"},children:[(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["Diem 블록체인의 구현을 위해 Rust언어에서 힌트를 받아 만들어졌으며,현재는 ",(0,s.jsx)("span",{style:{color:"purple"},children:"Aptos"}),"및"," ",(0,s.jsx)("span",{style:{color:"purple"},children:"Sui"}),"에서 사용하고 있습니다."]}),(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"Move를 사용하면 개발자가 자산을 유연하게 관리하고 전송하는 프로그램을 작성하는 동시에 해당 자산에 대한 공격에 방어(보안 및 보호)를 제공할수 있습니다."})]})}),(0,s.jsx)(r.Z,{xs:0,md:4}),(0,s.jsx)(r.Z,{xs:12,md:4,children:(0,s.jsx)("img",{src:"/img/move.webp",style:{width:"100%",borderRadius:"10px",marginTop:"30px"}})}),(0,s.jsx)(r.Z,{xs:12,children:(0,s.jsx)(o.Z,{sx:{width:"100%",marginTop:"30px"},children:(0,s.jsx)(d.Z,{variant:"h4",gutterBottom:!0,children:"특징"})})}),(0,s.jsx)(r.Z,{xs:0,md:4}),(0,s.jsx)(r.Z,{xs:12,children:(0,s.jsxs)(o.Z,{sx:{width:"100%",textAlign:"left",marginTop:"30px"},children:[(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"1. 자산 보안: Move 언어는 자산의 보안성을 강조합니다. 타입 시스템을 사용하여 자산의 일관성과 불변성을 보장하며, 잠재적인 버그와 취약점을 예방하는데 도움이 됩니다."}),(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"2.자산의 흐름 제어: Move 언어는 자산의 흐름을 제어하는 것을 강조합니다. 자산의 이동 및 전송에 대한 규칙과 제약을 명확하게 정의하여 보안과 논리적 일관성을 유지합니다."}),(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"3.모듈화: Move 언어는 모듈화를 지원하여 스마트 컨트랙트의 재사용성과 확장성을 향상시킵니다. 모듈은 독립적으로 작동하며 다른 모듈과 상호작용할 수 있습니다."})]})})]}),j=t(74855),p=t(34209),m=t(84283),u=t(90066);function Z(e){let{code:n}=e,[t,r]=(0,x.useState)(!1),[l,i]=(0,x.useState)(!1),[o,d]=(0,x.useState)(!1);return(0,s.jsxs)("div",{style:{position:"relative"},onMouseEnter:()=>{i(!0)},onMouseLeave:()=>{i(!1)},children:[(0,s.jsx)(p.Z,{language:"javascript",style:m.cL,children:n}),(0,s.jsx)(j.CopyToClipboard,{text:n,children:(0,s.jsx)("button",{onClick:()=>{console.log("코드가 복사되었습니다."),r(!0),d(!0),setTimeout(()=>{r(!1),d(!1)},1e3)},style:{position:"absolute",top:"0",right:"0",margin:"8px",padding:"8px",background:"none",border:"none",cursor:"pointer",opacity:l?1:0,transition:"opacity 0.3s",display:"flex",alignItems:"center"},children:o?(0,s.jsx)(u.Z,{style:{color:"#fff",transition:"color 0.3s"}}):(0,s.jsx)(u.Z,{style:{color:t?"#fff":"#000",transition:"color 0.3s"}})})})]})}var g=()=>(0,s.jsxs)(r.Z,{container:!0,children:[(0,s.jsx)(r.Z,{xs:12,children:(0,s.jsx)(o.Z,{sx:{width:"100%"},children:(0,s.jsx)(d.Z,{variant:"h3",gutterBottom:!0,children:"모듈과 스크립트"})})}),(0,s.jsx)(r.Z,{xs:12,children:(0,s.jsxs)(o.Z,{sx:{width:"100%",textAlign:"left"},children:[(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"Move는 두 가지 종류의 프로그램인 모듈(Module)과 스크립트(Script)를 가지고 있습니다. 모듈은 구조체 타입과 이러한 타입에 작용하는 함수를 정의하는 라이브러리입니다. 구조체 타입은 Move의 전역 스토리지의 스키마를 정의하며, 모듈 함수는 스토리지를 업데이트하는 규칙을 정의합니다. 모듈 자체도 전역 스토리지에 저장됩니다. 스크립트는 전통적인 언어에서의 main 함수와 유사한 실행 가능한 진입점입니다. 스크립트는 일반적으로 전역 스토리지에 대한 업데이트를 수행하는 게시된 모듈의 함수를 호출합니다. 스크립트는 전역 스토리지에 게시되지 않는 일시적인 코드 조각입니다."}),(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"Move 소스 파일(또는 컴파일 단위)에는 여러 개의 모듈과 스크립트를 포함할 수 있습니다. 그러나 모듈을 게시하거나 스크립트를 실행하는 것은 별개의 VM(가상 머신) 작업입니다."})]})}),(0,s.jsx)(r.Z,{xs:12,children:(0,s.jsx)(o.Z,{sx:{width:"100%",marginTop:"30px"},children:(0,s.jsx)(d.Z,{variant:"h4",gutterBottom:!0,children:"스크립트"})})}),(0,s.jsx)(r.Z,{xs:12,children:" ex)스크립트 구조"}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  script {\n    <use>*\n    <constants>*\n    fun <identifier><[type parameters: constraint]*>([identifier: type]*) <function_body>\n}\n\n"})}),(0,s.jsx)(r.Z,{xs:12,sx:{marginTop:"40px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"스크립트 블록은 모든 사용 선언부로 시작해야 하며, 상수를 그 다음에 위치시킨 뒤 (마지막으로) 메인 함수 선언을 해야 합니다. 메인 함수는 어떤 이름으로든 사용할 수 있으며(main으로 명명할 필요는 없음), 스크립트 블록 내에서 유일한 함수여야 합니다. 인수의 개수에는 제한이 없으며, 값을 반환해서는 안 됩니다. 다음은 각각의 구성 요소를 포함한 예시입니다:"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  script {\n    // Import the debug module published at the named account address std.\n    use std::debug;\n\n    const ONE: u64 = 1;\n\n    fun main(x: u64) {\n        let sum = x + ONE;\n        debug::print(&sum)\n    }\n}\n"})}),(0,s.jsx)(r.Z,{xs:12,sx:{marginTop:"40px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"스크립트는 제한된 권한을 갖고 있으며, 친구(friends)를 선언하거나 구조체(struct types)를 정의하거나 전역 저장소에 접근할 수 없습니다. 스크립트의 주요 목적은 모듈 함수를 호출하는 것입니다."})})}),(0,s.jsx)(r.Z,{xs:12,sx:{marginTop:"40px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%"},children:(0,s.jsx)(d.Z,{variant:"h4",gutterBottom:!0,children:"모듈"})})}),(0,s.jsx)(r.Z,{xs:12,children:(0,s.jsx)("span",{style:{color:"purple"},children:"*모듈 구조"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  module <address>::<identifier> {\n    (<use> | <friend> | <type> | <function> | <constant>)*\n}\n"})}),(0,s.jsx)(r.Z,{xs:0,md:2}),(0,s.jsx)(r.Z,{xs:12,children:(0,s.jsxs)(o.Z,{sx:{width:"100%"},children:[(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:(0,s.jsxs)("span",{style:{color:"purple"},children:["*address:명명된 주소(",(0,s.jsx)("span",{style:{color:"purple"},children:"이름이 붙여진 주소"}),") 또는 리터럴 주소"]})}),(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:(0,s.jsxs)("span",{style:{color:"purple"},children:["*const:모듈의 함수에서 사용할수있는 전용",(0,s.jsx)("span",{style:{color:"purple"},children:"상수"}),"를 지정"]})})]})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  module 0x42::example {\n    struct Example has copy, drop {\n       i: u64 \n       }\n\n    use std::debug;\n\n    friend 0x42::another_example;\n       \n    const ONE: u64 = 1;\n       \n    public fun print(x: u64) {\n               let sum = x + ONE;\n               let example = Example { i: sum };\n               debug::print(&sum)\n    }\n}\n"})}),(0,s.jsx)(r.Z,{xs:12,sx:{marginTop:"40px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"0x42::example 모듈 부분은 example 모듈이 글로벌 저장소의 0x42 주소에 있는 계정 아래에 게시될 것임을 지정합니다. 모듈은 명명된 주소(named addresses)를 사용하여 선언할 수도 있습니다. 예를 들어:"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  module example_addr::example {\n    struct Example has copy, drop { a: address }\n\n    use std::debug;\n    friend example_addr::another_example;\n\n    public fun print() {\n        let example = Example { a: @example_addr };\n        debug::print(&example)\n    }\n}\n"})}),(0,s.jsx)(r.Z,{xs:12,sx:{marginTop:"40px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"명명된 주소는 소스 언어 수준에서만 존재하며, 컴파일 중에만 사용되므로, 바이트코드 수준에서 명명된 주소는 해당 값으로 완전히 대체됩니다. 예를 들어, 다음과 같은 코드가 있다고 가정해 봅시다:"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  script {\n    fun example() {\n        my_addr::m::foo(@my_addr);\n    }\n}\n"})}),(0,s.jsx)(r.Z,{xs:12,sx:{marginTop:"40px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"그리고 my_addr을 0xC0FFEE로 설정하여 컴파일한다면, 실제로 다음과 같이 동작합니다:"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  script {\n    fun example() {\n        0xC0FFEE::m::foo(@0xC0FFEE);\n    }\n}\n"})}),(0,s.jsx)(r.Z,{xs:12,sx:{marginTop:"40px"},children:(0,s.jsxs)(o.Z,{sx:{width:"100%",textAlign:"left"},children:[(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"하지만 소스 수준에서는 이러한 코드는 동등하지 않습니다. 함수 m::foo는 my_addr이라는 명명된 주소를 통해 접근되어야 하며, 해당 주소에 할당된 숫자 값으로는 접근할 수 없습니다."}),(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"모듈 이름은 영문자 a에서 z 또는 A에서 Z로 시작할 수 있습니다. 첫 번째 문자 이후에는 밑줄(_), 영문자 a에서 z, 영문자 A에서 Z 또는 숫자 0에서 9가 포함될 수 있습니다."})]})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  module my_module {}\n  module foo_bar_42 {}\n"})}),(0,s.jsx)(r.Z,{xs:12,sx:{marginTop:"40px"},children:(0,s.jsxs)(o.Z,{sx:{width:"100%",textAlign:"left"},children:[(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"일반적으로 모듈 이름은 소문자로 시작합니다. my_module이라는 모듈은 my_module.move라는 소스 파일에 저장되어야 합니다."}),(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"모듈 블록 내의 모든 요소는 어떤 순서로든 나타날 수 있습니다. 기본적으로 모듈은 타입과 함수의 집합입니다. use 키워드는 다른 모듈에서 타입을 가져오는 데 사용됩니다. friend 키워드는 신뢰할 수 있는 모듈의 목록을 지정합니다. const 키워드는 모듈의 함수에서 사용할 수 있는 비공개 상수를 정의합니다."})]})}),(0,s.jsx)(r.Z,{xs:12,sx:{marginTop:"40px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%"},children:(0,s.jsx)(d.Z,{variant:"h4",gutterBottom:!0,children:"\uD83E\uDD28모듈 특징정리"})})}),(0,s.jsx)(r.Z,{xs:0,md:2}),(0,s.jsx)(r.Z,{xs:12,md:8,sx:{marginTop:"40px"},children:(0,s.jsxs)(o.Z,{sx:{width:"100%",textAlign:"left"},children:[(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"1. 모듈 요소(사용, 상수, 함수 등)는 특정 순서로 구성되어야 합니다."}),(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["2.모듈은 ",(0,s.jsx)("span",{style:{color:"purple"},children:"전역저장소에"}),"저장됩니다."]}),(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"3.모듈은 main이라는 함수를 포함해야 합니다."}),(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["4. ",(0,s.jsx)("span",{style:{color:"purple"},children:"구조체"}),"는 모듈에서 유효합니다."]}),(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"5.모듈의 어떤 함수도 반환 값을 가질 수 없습니다."}),(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"6.모듈에는 하나의 함수만 선언할 수 있습니다."}),(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"7.친구 모듈은 모듈 내에서 유효합니다."}),(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["8.모듈은 ",(0,s.jsx)("span",{style:{color:"purple"},children:"주소"}),"와",(0,s.jsx)("span",{style:{color:"purple"},children:"식별자"}),"로 선언해야 합니다."]})]})}),(0,s.jsx)(r.Z,{xs:0,md:2}),(0,s.jsx)(r.Z,{xs:12,sx:{marginTop:"40px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%"},children:(0,s.jsx)(d.Z,{variant:"h4",gutterBottom:!0,children:"\uD83D\uDC69‍\uD83C\uDF93스크립트 특징정리"})})}),(0,s.jsx)(r.Z,{xs:0,md:2}),(0,s.jsx)(r.Z,{xs:12,md:8,sx:{marginTop:"40px"},children:(0,s.jsxs)(o.Z,{sx:{width:"100%",textAlign:"left"},children:[(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["1.스크립트는 ",(0,s.jsx)("span",{style:{color:"purple"},children:"전역저장소"}),"에 저장되지 않습니다."]}),(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["2.스크립트 요소(사용, 상수, 함수 등)는",(0,s.jsx)("span",{style:{color:"purple"},children:"특정순서"}),"로 구성되어야 합니다."]}),(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"3.스크립트 블록에는 하나의 함수만 선언할 수 있습니다."}),(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"4. 스크립트 함수는 임의의 이름을 가질 수 있습니다."}),(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"5.상수는 스크립트에서 유효합니다."}),(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"6.스크립트에는 하나의 함수만 선언할 수 있으며 이름은 main으로 지정해야 합니다."}),(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"7.스크립트에 선언된 함수는 얼마든지 있을 수 있습니다."}),(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"8.friend 모듈은 스크립트에서 선언할 수 있습니다."}),(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["9.스크립트에서 선언된 함수는",(0,s.jsx)("span",{style:{color:"purple"},children:"매개변수"}),"를 가질 수 없습니다."]}),(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"10. 스크립트에서 선언된 함수는 반환 값을 가질 수 없습니다."}),(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["11. ",(0,s.jsx)("span",{style:{color:"purple"},children:"구조체"}),"는 스크립트에서 유효합니다."]})]})}),(0,s.jsx)(r.Z,{xs:0,md:2}),(0,s.jsx)(r.Z,{xs:12,children:"ex)예시"}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  // Example Module\n  module overmind::bananas {\n  \n      use std::vector;\n      use std::signer;\n  \n      struct BananaStore has key {\n          bushels: vector<Bushel>\n      }\n  \n      struct Bushel has store, drop {\n          bananas: vector<Banana>\n      }\n  \n      struct Banana has store, drop {}\n  \n      public entry fun buy_banana(buyer: &signer) acquires BananaStore {\n          let buyer_address = signer::address_of(buyer);\n  \n          if (!exists<BananaStore>(buyer_address)) {\n              move_to(\n                  buyer,\n                  BananaStore {\n                      bushels: vector<Bushel>[]\n                  }\n              );\n          };\n  \n          let bananaStore = borrow_global_mut<BananaStore>(buyer_address);\n  \n          let bushels_mut_ref = &mut bananaStore.bushels;\n  \n          let bushel_new = Bushel {\n              bananas: vector<Banana>[\n                  Banana {},\n                  Banana {},\n                  Banana {},\n                  Banana {}\n              ]\n          };\n  \n          vector::push_back<Bushel>(bushels_mut_ref, bushel_new);\n      }\n  \n      public entry fun eat_banana(account: &signer) acquires BananaStore {\n          let account_address = signer::address_of(account);\n  \n          let bananaStore = borrow_global_mut<BananaStore>(account_address);\n          let bushels_mut_ref = &mut bananaStore.bushels;\n          let first_bushel = vector::remove<Bushel>(bushels_mut_ref, 0);\n  \n          let _ = vector::pop_back<Banana>(&mut first_bushel.bananas);\n  \n          if (vector::length<Banana>(&mut first_bushel.bananas) != 0) {\n              vector::insert<Bushel>(bushels_mut_ref, 0, first_bushel);\n          }\n      }\n  }\n  \n\n"})})]}),v=t(7906),y=t(295),b=t(98102),f=t(89755),T=t(72882),w=t(53184),_=t(53816),B=t(90629),A=t(90948),M=()=>{let e=(0,A.ZP)(b.Z)(e=>{let{theme:n}=e;return{["&.".concat(f.Z.head)]:{backgroundColor:" #171B1C",color:n.palette.common.white},["&.".concat(f.Z.body)]:{fontSize:12}}}),n=(0,A.ZP)(_.Z)(e=>{let{theme:n}=e;return{"&:nth-of-type(odd)":{backgroundColor:n.palette.common.white,color:n.palette.common.white},"&:last-child td, &:last-child th":{border:0}}});return(0,s.jsxs)(r.Z,{container:!0,children:[(0,s.jsx)(r.Z,{xs:12,children:(0,s.jsx)(o.Z,{sx:{width:"100%"},children:(0,s.jsx)(d.Z,{variant:"h3",gutterBottom:!0,children:"2 정수"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["Move는 6개의 부호 없는 정수 유형(",(0,s.jsx)("span",{style:{color:"purple"},children:"u8, u16, u32, u64, u128,u256"}),") 을 지원합니다.이러한 유형의 값 범위는 유형의 크기에 따라 0에서 최대값까지입니다."]})})}),(0,s.jsx)(r.Z,{xs:0,md:2}),(0,s.jsx)(r.Z,{xs:12,md:8,sx:{marginTop:"30px"},children:(0,s.jsx)(T.Z,{component:B.Z,children:(0,s.jsxs)(v.Z,{sx:{width:"100%"},"aria-label":"customized table",children:[(0,s.jsx)(w.Z,{children:(0,s.jsxs)(_.Z,{children:[(0,s.jsx)(e,{children:"유형"}),(0,s.jsx)(e,{children:"값 범위"})]})}),(0,s.jsx)(y.Z,{component:"div",children:[{type:"부호 없는 8비트 정수,u8",range:"0 ~ 2^8 - 1"},{type:"부호 없는 16비트 정수,u16",range:"0 ~ 2^16 - 1"},{type:"부호 없는 32비트 정수,u32",range:"0 ~ 2^32 - 1"},{type:"부호 없는 64비트 정수,u64",range:"0 ~ 2^64 - 1"},{type:"부호 없는 128비트 정수,u128",range:"0 ~ 2^128 - 1"},{type:"부호 없는 256비트 정수,u256",range:"0 ~ 2^256 - 1"}].map(t=>(0,s.jsxs)(n,{children:[(0,s.jsx)(e,{component:"div",scope:"row",children:null==t?void 0:t.type}),(0,s.jsx)(e,{children:null==t?void 0:t.range})]}))})]})})}),(0,s.jsx)(r.Z,{xs:0,md:2}),(0,s.jsx)(r.Z,{xs:12,children:(0,s.jsx)(o.Z,{sx:{width:"100%",marginTop:"30px"},children:(0,s.jsx)(d.Z,{variant:"h4",gutterBottom:!0,children:"리터럴"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left",marginTop:"20px"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["이러한 유형의 리터럴 값은 숫자의 연속으로 지정할 수 있습니다 예를 들어, ",(0,s.jsx)("span",{style:{color:"purple"},children:"112"}),"나",(0,s.jsx)("span",{style:{color:"purple"},children:"0xFF"}),"와 같이 사용할 수 있습니다. 리터럴의 유형은 선택적으로 접미사로 추가할 수 있습니다. 예를 들어, ",(0,s.jsx)("span",{style:{color:"purple"},children:"112u8"}),"과 같이 사용할 수 있습니다. 유형이 지정되지 않으면 컴파일러는 리터럴이 사용된 문맥에서 유형을 추론하려고 시도합니다. 유형을 추론할 수 없는 경우 u64로 가정합니다.숫자 리터럴은 그룹화와 가독성을 위해 밑줄로 구분할 수 있습니다.",(0,s.jsx)("span",{style:{color:"purple"},children:"(예: 1_234_5678, 1_000u128, 0xAB_CD_12_35)"}),". 리터럴이 지정된(",(0,s.jsx)("span",{style:{color:"purple"},children:"또는 추론된"}),") 크기 범위보다 너무 큰 경우, 오류가 보고됩니다. 이는 정수 리터럴이 해당하는 유형의 범위를 초과하는 경우에 발생합니다."]})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"      module example::test {\n            fun main(){\n            //  명시적 주석이 있는 리터럴;\n            let explicit_u8 = 1u8;\n            let explicit_u16 = 1u16;\n            let explicit_u32 = 1u32;\n            let explicit_u64 = 2u64;\n            let explicit_u128 = 3u128;\n            let explicit_u256 = 1u256;\n            let explicit_u64_underscored = 154_322_973u64;\n            \n            // 간단한 추론을 통한 리터럴\n            let simple_u8: u8 = 1;\n            let simple_u16: u16 = 1;\n            let simple_u32: u32 = 1;\n            let simple_u64: u64 = 2;\n            let simple_u128: u128 = 3;\n            let simple_u256: u256 = 1;\n            \n            //보다 복잡한 추론을 통한 리터럴\n            let complex_u8 = 1; // 추론된: u8\n            //shift의 오른쪽 피연산자는 u8이어야 합니다.\n            let _unused = 10 << complex_u8;\n            \n            let x: u8 = 38;\n            let complex_u8 = 2; //// 추론된: u8\n            //인수는 동일한 타입을 가져야합니다.\n            let _unused = x + complex_u8;\n            \n            let complex_u128 = 133_876; // 추론된: u128\n            //함수 인수의 타입으로부터 추론됨\n            function_that_takes_u128(complex_u128);\n            \n            //16진수로 리터럴을 작성할 수 있습니다.\n            let hex_u8: u8 = 0x1;\n            let hex_u16: u16 = 0x1BAE;\n            let hex_u32: u32 = 0xDEAD80;\n            let hex_u64: u64 = 0xCAFE;\n            let hex_u128: u128 = 0xDEADBEEF;\n            let hex_u256: u256 = 0x1123_456A_BCDE_F;\n    }\n}\n"})}),(0,s.jsx)(r.Z,{xs:12,children:(0,s.jsx)(o.Z,{sx:{width:"100%",marginTop:"30px"},children:(0,s.jsx)(d.Z,{variant:"h4",gutterBottom:!0,children:"산술"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["각각의 유형은 동일한 집합의 체크된 산술 연산을 지원합니다. 이러한 모든 연산에서는 두 인수(",(0,s.jsx)("span",{style:{color:"purple"},children:"왼쪽과 오른쪽 피연산자"}),")가 동일한 유형이어야 합니다. 서로 다른 유형의 값을 연산해야 하는 경우 먼저 형 변환을 수행해야 합니다. 마찬가지로, 연산 결과가 정수 유형에 너무 크다고 예상되는 경우 연산을 수행하기 전에 더 큰 크기로 형 변환을 수행해야 합니다. 모든 산술 연산은 수학적인 정수와는 달리",(0,s.jsx)("span",{style:{color:"purple"},children:"오버플로,언더플로,0으로 나누기"}),"와 같이 수학적으로 정수가 아닌 동작을 하지 않고 대신",(0,s.jsx)("span",{style:{color:"purple"},children:"중단"}),"됩니다."]})})}),(0,s.jsx)(r.Z,{xs:0,md:2}),(0,s.jsx)(r.Z,{xs:12,md:8,sx:{marginTop:"30px"},children:(0,s.jsx)(T.Z,{component:B.Z,children:(0,s.jsxs)(v.Z,{sx:{width:"100%"},"aria-label":"customized table",children:[(0,s.jsx)(w.Z,{children:(0,s.jsxs)(_.Z,{children:[(0,s.jsx)(e,{children:"통사론"}),(0,s.jsx)(e,{children:"작업"}),(0,s.jsx)(e,{children:"중단"})]})}),(0,s.jsx)(y.Z,{component:"div",children:[{통사론:"+",작업:"덧셈",중단:"결과가 정수 유형에 비해 너무 큽니다"},{통사론:"-",작업:"뺴기",중단:"결과가 0보다 작음"},{통사론:"*",작업:"곱셈",중단:"결과가 정수 유형에 비해 너무 큽니다"},{통사론:"%",작업:"모듈식 분할",중단:"제수는 0"},{통사론:"/",작업:"잘림 나누기",중단:"제수는 0"}].map(t=>(0,s.jsxs)(n,{children:[(0,s.jsx)(e,{component:"div",scope:"row",children:null==t?void 0:t.통사론}),(0,s.jsx)(e,{children:null==t?void 0:t.작업}),(0,s.jsx)(e,{children:null==t?void 0:t.중단})]}))})]})})}),(0,s.jsx)(r.Z,{xs:0,md:2}),(0,s.jsx)(r.Z,{xs:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",marginTop:"30px"},children:(0,s.jsx)(d.Z,{variant:"h4",gutterBottom:!0,children:"비트연산"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsxs)(o.Z,{sx:{width:"100%"},children:[(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,sx:{textAlign:"left"},children:"정수 유형은 다음과 같은 비트 연산을 지원합니다. 이러한 연산은 각 숫자를 0 또는 1로 구성된 개별적인 비트 시퀀스로 취급하며 숫자적인 정수 값으로 취급하지 않습니다."}),(0,s.jsx)(d.Z,{children:(0,s.jsx)("span",{style:{color:"purple"},children:"* 비트 연산은 중단되지 않습니다."})})]})}),(0,s.jsx)(r.Z,{xs:0,md:2}),(0,s.jsx)(r.Z,{xs:12,md:8,sx:{marginTop:"30px"},children:(0,s.jsx)(T.Z,{component:B.Z,children:(0,s.jsxs)(v.Z,{sx:{width:"100%"},"aria-label":"customized table",children:[(0,s.jsx)(w.Z,{children:(0,s.jsxs)(_.Z,{children:[(0,s.jsx)(e,{children:"통사론"}),(0,s.jsx)(e,{children:"작업"}),(0,s.jsx)(e,{children:"설명"})]})}),(0,s.jsx)(y.Z,{component:"div",children:[{통사론:"&",작업:"비트 및",설명:"부울을 수행하고 각 비트에 대해 쌍으로"},{통사론:"|",작업:"비트 또는",설명:"부울 또는 각 비트에 대해 쌍으로 수행"},{통사론:"^",작업:"비트 xor",설명:"부을 독점 또는 각 비트에 대해 쌍으로 수행"}].map(t=>(0,s.jsxs)(n,{children:[(0,s.jsx)(e,{component:"div",scope:"row",children:null==t?void 0:t.통사론}),(0,s.jsx)(e,{children:null==t?void 0:t.작업}),(0,s.jsx)(e,{children:null==t?void 0:t.설명})]}))})]})})}),(0,s.jsx)(r.Z,{xs:0,md:2}),(0,s.jsx)(r.Z,{xs:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",marginTop:"30px"},children:(0,s.jsx)(d.Z,{variant:"h4",gutterBottom:!0,children:"비트시프트"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px",textAlign:"left"},children:(0,s.jsx)(o.Z,{sx:{width:"100%"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["비트 연산과 유사하게, 각 정수 유형은 비트 시프트를 지원합니다. 그러나 다른 연산과 달리, 우측 피연산자(시프트할 비트 수)는 항상",(0,s.jsx)("span",{style:{color:"purple"},children:"u8"}),"이어야 하며 좌측 피연산자( ",(0,s.jsx)("span",{style:{color:"purple"},children:"시프트할 숫자"}),")와 일치할 필요는 없습니다.비트 시프트는",(0,s.jsx)("span",{style:{color:"purple"},children:"u8, u16, u32, u64, u128 , u256"}),"에 대해 각각",(0,s.jsx)("span",{style:{color:"purple"},children:"8, 16, 32, 64, 128, 256"}),"보다",(0,s.jsx)("span",{style:{color:"purple"},children:"크거나 같은 비트 수로 시프트할 경우 중지될 수 있습니다."})]})})}),(0,s.jsx)(r.Z,{xs:0,md:2}),(0,s.jsx)(r.Z,{xs:12,md:8,sx:{marginTop:"30px"},children:(0,s.jsx)(T.Z,{component:B.Z,children:(0,s.jsxs)(v.Z,{sx:{width:"100%"},"aria-label":"customized table",children:[(0,s.jsx)(w.Z,{children:(0,s.jsxs)(_.Z,{children:[(0,s.jsx)(e,{children:"통사론"}),(0,s.jsx)(e,{children:"작업"}),(0,s.jsx)(e,{children:"중단"})]})}),(0,s.jsx)(y.Z,{component:"div",children:[{통사론:"<<",작업:"왼쪽으로 이동",중단:"이동할 비트 수가 정수 유형의 크기보다 큽니다"},{통사론:">>",작업:"오른쪽으로 이동",중단:"이동할 비트 수가 정수 유형의 크기보다 큽니다"}].map(t=>(0,s.jsxs)(n,{children:[(0,s.jsx)(e,{component:"div",scope:"row",children:null==t?void 0:t.통사론}),(0,s.jsx)(e,{children:null==t?void 0:t.작업}),(0,s.jsx)(e,{children:null==t?void 0:t.중단})]}))})]})})}),(0,s.jsx)(r.Z,{xs:0,md:2}),(0,s.jsx)(r.Z,{xs:12,children:(0,s.jsx)(o.Z,{sx:{width:"100%",marginTop:"30px"},children:(0,s.jsx)(d.Z,{variant:"h4",gutterBottom:!0,children:"비교 연산자"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px",textAlign:"left"},children:(0,s.jsx)(o.Z,{sx:{width:"100%"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["Move에서는 정수 유형만이 비교 연산자를 사용할 수 있습니다. 비교 연산자를 사용할 때는 두 인자가 동일한 유형이어야 합니다. 만약 서로 다른 유형의 정수를 비교해야 하는 경우, 먼저 한 쪽을 형변환해야 합니다. Move에서의 비교 연산은",(0,s.jsx)("span",{style:{color:"purple"},children:" 중단되지 않습니다."})," 이는 비교 연산이 갑작스럽게 종료되거나 오류를 발생시키지 않는다는 것을 의미합니다. 대신, 비교 연산은 비교 결과를 나타내는 불리언 값 (",(0,s.jsx)("span",{style:{color:"purple"},children:"참 또는 거짓"}),")을 반환합니다."]})})}),(0,s.jsx)(r.Z,{xs:0,md:2}),(0,s.jsx)(r.Z,{xs:12,md:8,sx:{marginTop:"30px"},children:(0,s.jsx)(T.Z,{component:B.Z,children:(0,s.jsxs)(v.Z,{sx:{width:"100%"},"aria-label":"customized table",children:[(0,s.jsx)(w.Z,{children:(0,s.jsxs)(_.Z,{children:[(0,s.jsx)(e,{children:"통사론"}),(0,s.jsx)(e,{children:"작업"})]})}),(0,s.jsx)(y.Z,{component:"div",children:[{통사론:"<",작업:"보다 작은"},{통사론:">",작업:"보다큰"},{통사론:"<=",작업:"작거나 같음"},{통사론:">=",작업:"크거나 같음"}].map(t=>(0,s.jsxs)(n,{children:[(0,s.jsx)(e,{component:"div",scope:"row",children:null==t?void 0:t.통사론}),(0,s.jsx)(e,{children:null==t?void 0:t.작업})]}))})]})})}),(0,s.jsx)(r.Z,{xs:0,md:2}),(0,s.jsx)(r.Z,{xs:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%"},children:(0,s.jsx)(d.Z,{variant:"h4",gutterBottom:!0,children:"평등"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px",textAlign:"left"},children:(0,s.jsx)(o.Z,{sx:{width:"100%"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["Move의 모든 정수 유형은",(0,s.jsx)("span",{style:{color:"purple"},children:'"equal"'}),"과",(0,s.jsx)("span",{style:{color:"purple"},children:'"not equal"'})," 연산을 지원합니다. 두 인자는 동일한 유형이어야 합니다. 서로 다른 유형의 정수를 비교해야 하는 경우, 먼저 하나를 형변환해야 합니다.",(0,s.jsx)("span",{style:{color:"purple"},children:"등호 연산은 중단되지 않습니다."})]})})}),(0,s.jsx)(r.Z,{xs:0,md:2}),(0,s.jsx)(r.Z,{xs:12,md:8,sx:{marginTop:"30px"},children:(0,s.jsx)(T.Z,{component:B.Z,children:(0,s.jsxs)(v.Z,{sx:{width:"100%"},"aria-label":"customized table",children:[(0,s.jsx)(w.Z,{children:(0,s.jsxs)(_.Z,{children:[(0,s.jsx)(e,{children:"통사론"}),(0,s.jsx)(e,{children:"작업"})]})}),(0,s.jsx)(y.Z,{component:"div",children:[{통사론:"==",작업:"같은"},{통사론:"!=",작업:"같지않은"}].map(t=>(0,s.jsxs)(n,{children:[(0,s.jsx)(e,{component:"div",scope:"row",children:null==t?void 0:t.통사론}),(0,s.jsx)(e,{children:null==t?void 0:t.작업})]}))})]})})}),(0,s.jsx)(r.Z,{xs:0,md:2}),(0,s.jsx)(r.Z,{xs:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%"},children:(0,s.jsx)(d.Z,{variant:"h4",gutterBottom:!0,children:"형변환"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px",textAlign:"left"},children:(0,s.jsx)(o.Z,{sx:{width:"100%"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["Move에서는 한 크기의 정수 유형을 다른 크기의 정수 유형으로",(0,s.jsx)("span",{style:{color:"purple"},children:"형변환"})," 할 수 있습니다. 정수는 Move에서 형변환를 지원하는 유일한 유형입니다. 정수를 크기가 다른 유형으로 형변환 할 때, Move에서는",(0,s.jsx)("span",{style:{color:"purple"},children:"형변환이 값을 절단하지 않는다는 점"}),"에 유의해야 합니다. 이는 형변환 연산이 원래 정수의 전체 값을 보존한다는 것을 의미합니다. 즉, 목표 정수 유형의 범위를 초과하는 경우에도 원래 정수의 전체 값이 유지됩니다. 그러나, 형변환의 결과가 지정된 유형에 너무 큰 경우 형변환이 중단될 수 있다는 점을 알려드립니다. 이는형변환 결과가 지정된 유형에 맞지 않을 때 형변환이 중단되는 것을 의미합니다."]})})}),(0,s.jsx)(r.Z,{xs:0,md:2}),(0,s.jsx)(r.Z,{xs:12,md:8,sx:{marginTop:"30px"},children:(0,s.jsx)(T.Z,{component:B.Z,children:(0,s.jsxs)(v.Z,{sx:{width:"100%"},"aria-label":"customized table",children:[(0,s.jsx)(w.Z,{children:(0,s.jsxs)(_.Z,{children:[(0,s.jsx)(e,{children:"통사론"}),(0,s.jsx)(e,{children:"작업"}),(0,s.jsx)(e,{children:"다음과 같은 경우 중단"})]})}),(0,s.jsx)(y.Z,{component:"div",children:[{통사론:"(e as T)",작업:"e 정수 표현식을 정수 유형으로형변환T",설명:"e로 표현하기에는 너무 큽니다"}].map(t=>(0,s.jsxs)(n,{children:[(0,s.jsx)(e,{component:"div",scope:"row",children:null==t?void 0:t.통사론}),(0,s.jsx)(e,{children:null==t?void 0:t.작업}),(0,s.jsx)(e,{children:null==t?void 0:t.설명})]}))})]})})}),(0,s.jsx)(r.Z,{xs:0,md:2}),(0,s.jsx)(r.Z,{xs:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%"},children:(0,s.jsx)(d.Z,{variant:"h4",gutterBottom:!0,children:"소유권"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px",textAlign:"left"},children:(0,s.jsx)(o.Z,{sx:{width:"100%"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["Move 언어에 내장된 정수 값들도 암묵적으로 복사 가능한 속성을 갖고 있습니다.",(0,s.jsx)("span",{style:{color:"purple"},children:"이는 복사와 같은 명시적 명령 없이도 복사될 수 있다는 것을 의미"}),"합니다. 정수 값을 새 변수에 할당하거나 함수 인자로 전달할 때, 해당 값의 복사본이 생성됩니다. 원본 값과 복사본은 서로 독립적으로 사용될 수 있으며, 한 쪽 복사본을 수정해도 다른 쪽에는 영향을 미치지 않습니다. 이러한 복사 연산은 내부적으로 암묵적으로 처리됩니다. 예를 들어:"]})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"      module example::test {\n    fun main(){\n  let x: u8 = 10;\n  let y = x; // x의 값을 y에 복사합니다.\n    }\n}\n"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{textAlign:"left",marginTop:"30px"},children:(0,s.jsxs)(d.Z,{children:["이 경우,",(0,s.jsx)("span",{style:{color:"purple"},children:"x의 값이 y로 복사되며, x와 y는 각각 정수 값의 독립적인 복사본을 가지고 있습니다."}),"y를 수정해도 x의 값에는 영향을 주지 않으며, 그 반대도 마찬가지입니다. 이러한 암묵적인 복사 동작은 명시적인 복사 명령 없이도 정수 값을 간편하게 처리할 수 있도록 해줍니다. 그러나 보다 복잡한 유형과 리소스의 경우, Move에서는 소유권과 빌림에 대한 명시적인 지침이나 고려 사항이 필요할 수 있습니다."]})})]})},C=()=>{let e=(0,A.ZP)(b.Z)(e=>{let{theme:n}=e;return{["&.".concat(f.Z.head)]:{backgroundColor:n.palette.common.black,color:n.palette.common.white},["&.".concat(f.Z.body)]:{fontSize:10}}}),n=(0,A.ZP)(_.Z)(e=>{let{theme:n}=e;return{"&:nth-of-type(odd)":{backgroundColor:n.palette.action.hover},"&:last-child td, &:last-child th":{border:0}}});return(0,s.jsxs)(r.Z,{container:!0,children:[(0,s.jsx)(r.Z,{xs:12,children:(0,s.jsx)(o.Z,{sx:{width:"100%"},children:(0,s.jsx)(d.Z,{variant:"h3",gutterBottom:!0,children:"부울"})})}),(0,s.jsx)(r.Z,{xs:0,md:2}),(0,s.jsx)(r.Z,{xs:12,md:8,children:(0,s.jsx)(o.Z,{sx:{width:"100%"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:[(0,s.jsx)("span",{style:{color:"purple"},children:"부울"}),"은 Move에서 boolean",(0,s.jsx)("span",{style:{color:"purple"},children:"true"}),"와",(0,s.jsx)("span",{style:{color:"purple"},children:"false"})," 값을 표현하기 위한 원시 타입입니다.또한 bool 타입의 리터럴은 true 또는 false로 표현됩니다."]})})}),(0,s.jsx)(r.Z,{xs:0,md:2}),(0,s.jsx)(r.Z,{xs:12,children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:(0,s.jsx)("span",{style:{color:"purple"},children:"* bool은 세가지 논리 연산을 지원합니다."})})}),(0,s.jsx)(r.Z,{xs:0,md:2}),(0,s.jsx)(r.Z,{xs:12,md:8,sx:{marginTop:"30px"},children:(0,s.jsx)(T.Z,{component:B.Z,children:(0,s.jsxs)(v.Z,{sx:{width:"100%"},"aria-label":"customized table",children:[(0,s.jsx)(w.Z,{children:(0,s.jsxs)(_.Z,{children:[(0,s.jsx)(e,{children:"통사론"}),(0,s.jsx)(e,{children:"설명"}),(0,s.jsx)(e,{children:"등가표현"})]})}),(0,s.jsx)(y.Z,{component:"div",children:[{통사론:"&&",설명:"단락 논리 및",등가표현:"p && q에 해당합니다 if(p)q else false"},{통사론:"||",설명:"단락 논리 또는",등가표현:"p || q 에 해당합니다 if(p) true else q"},{통사론:"!",설명:"논리적 부정",등가표현:"!p에 해당합니다 if(q) false else true"}].map(t=>(0,s.jsxs)(n,{children:[(0,s.jsx)(e,{component:"div",scope:"row",children:null==t?void 0:t.통사론}),(0,s.jsx)(e,{children:null==t?void 0:t.설명}),(0,s.jsx)(e,{children:null==t?void 0:t.등가표현})]}))})]})})}),(0,s.jsx)(r.Z,{xs:0,md:2}),(0,s.jsx)(r.Z,{xs:12,md:12,children:(0,s.jsx)(o.Z,{sx:{width:"100%",marginTop:"30px"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"bool 값은 Move의 여러 제어 흐름 구조에서 사용됩니다:"})})}),(0,s.jsx)(r.Z,{xs:12,sx:{marginTop:"30px"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:(0,s.jsx)("span",{style:{color:"purple"},children:"* if문"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"      \n  if bool_표현식 {\n // bool_표현식이 true일 경우 실행되는 코드 블록\n } else {\n  // bool_표현식이 false일 경우 실행되는 코드 블록\n }\n\n"})}),(0,s.jsx)(r.Z,{xs:12,sx:{marginTop:"30px"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:(0,s.jsx)("span",{style:{color:"purple"},children:"* while문"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"      while bool_표현식 {\n    // bool_표현식이 true인 동안 반복적으로 실행되는 코드 블록\n  }\n"})}),(0,s.jsx)(r.Z,{xs:12,sx:{marginTop:"30px"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:(0,s.jsx)("span",{style:{color:"purple"},children:"3) assert:이 연산은 두 개의 인자를 받습니다: bool 타입의 조건과 u64 타입의 코드"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"     assert!(bool_표현식, 오류_메시지); "})}),(0,s.jsx)(r.Z,{xs:12,children:(0,s.jsx)(o.Z,{sx:{width:"100%",marginTop:"30px"},children:(0,s.jsx)(d.Z,{variant:"h4",gutterBottom:!0,children:"소유권"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,children:(0,s.jsx)(o.Z,{sx:{width:"100%",marginTop:"30px"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"다른 스칼라 값들과 마찬가지로, 언어 내장의 boolean 값들은 암시적으로 복사 가능합니다. 즉, copy와 같은 명시적인 지시어 없이도 복사할 수 있습니다."})})}),(0,s.jsx)(r.Z,{xs:12,children:(0,s.jsx)(o.Z,{sx:{width:"100%",marginTop:"30px"},children:(0,s.jsx)(d.Z,{variant:"h4",gutterBottom:!0,children:"정리"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"module example::test {\n    fun example(){\n          let a = true  //true\n          let b = false //false\n          let c = true && false //false\n          let d = false || true //true\n          let e = true || false && true //true\n          let f = !true //false\n          let g = !false  //true\n          let h = !true || true //true\n          let i = false || true && false //false  \n    }\n}\n"})})]})},D=()=>(0,s.jsxs)(r.Z,{container:!0,children:[(0,s.jsx)(r.Z,{xs:12,children:(0,s.jsx)(o.Z,{sx:{width:"100%"},children:(0,s.jsx)(d.Z,{variant:"h3",gutterBottom:!0,children:"주소"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,children:(0,s.jsxs)(o.Z,{sx:{width:"100%",textAlign:"left",marginTop:"30px"},children:[(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:[(0,s.jsx)("span",{style:{color:"purple"},children:"주소(Address)"})," 는 Move 언어에서 글로벌 스토리지의 위치(가끔은 계정이라고도 함)를 나타내기 위해 사용되는 내장된 유형입니다. 주소 값은",(0,s.jsx)("span",{style:{color:"purple"},children:"128비트(16바이트)"}),"식별자입니다. 특정 주소에는",(0,s.jsx)("span",{style:{color:"purple"},children:"모듈(Module)"}),"과",(0,s.jsx)("span",{style:{color:"purple"},children:"리소스(Resource)"}),"두 가지 요소를 저장할 수 있습니다."]}),(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["실제로 주소는 128비트 정수로 구성되지만, Move 주소는 의도적으로 불투명한 형태로 구성되어 있습니다. 즉, 정수로부터 주소를 생성할 수 없으며, 산술 연산을 지원하지 않으며, 수정할 수 없습니다. 포인터 산술과 유사한 용도로 사용될 수 있는 흥미로운 프로그램이 있을 수 있지만 (예: C의 포인터 산술), Move는 정적 검증을 지원하기 위해 처음부터",(0,s.jsx)("span",{style:{color:"purple"},children:"이러한 동적 동작을 허용하지 않습니다."})]}),(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["런타임 주소 값(",(0,s.jsx)("span",{style:{color:"purple"},children:"주소 유형의 값"}),")을 사용하여 해당 주소에 있는 리소스에 접근할 수 있습니다. 주소 값을 통해 런타임에서 모듈에 액세스할 수는 없습니다."]})]})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%"},children:(0,s.jsx)(d.Z,{variant:"h4",gutterBottom:!0,children:"문법"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsxs)(o.Z,{sx:{width:"100%",textAlign:"left"},children:[(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["주소는 ",(0,s.jsx)("span",{style:{color:"purple"},children:"명명된(named) 주소"}),"와",(0,s.jsx)("span",{style:{color:"purple"},children:"숫자형(numerical) 주소"})," 로 두 가지 형태로 나뉩니다. 명명된 주소의 구문은 Move에서 일반적으로 사용되는 명명된 식별자의 규칙을 따릅니다. 숫자형 주소의 구문은 16진수로 인코딩된 값에 제한되지 않으며, 유효한 u128 숫자 값으로 주소 값으로 사용할 수 있습니다. 예를 들어,",(0,s.jsx)("span",{style:{color:"purple"},children:"42, 0xCAFE, 2021"})," 은 모두 유효한 숫자형 주소 리터럴입니다."]}),(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"주소가 식(expression) 컨텍스트에서 사용되는지 여부를 구분하기 위해 주소를 사용하는 구문은 사용되는 컨텍스트에 따라 다릅니다:"}),(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["주소가 식으로 사용될 때는 주소 앞에 @ 문자가 붙어야 합니다. 즉,",(0,s.jsxs)("span",{style:{color:"purple"},children:[" ","@<numerical_value>"]}),"또는",(0,s.jsx)("span",{style:{color:"purple"},children:"@<named_address_identifier>"}),"형태여야 합니다. 식 컨텍스트 이외의 곳에서는 주소를 @ 문자 없이 쓸 수 있습니다. 즉,",(0,s.jsx)("span",{style:{color:"purple"},children:" <numerical_value>"})," 또는",(0,s.jsx)("span",{style:{color:"purple"},children:"<named_address_identifier>"}),"형태로 쓸 수 있습니다. 일반적으로 @는 주소를 네임스페이스 항목에서 식 항목으로 전환하는 연산자로 생각할 수 있습니다."]})]})}),(0,s.jsx)(r.Z,{xs:12,children:(0,s.jsx)(o.Z,{sx:{width:"100%",marginTop:"30px"},children:(0,s.jsx)(d.Z,{variant:"h4",gutterBottom:!0,children:"명명된 주소"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  module example::test{\n    fun example(){\n        let a1: address = @0x1; // 0x00000000000000000000000000000001의 약식표현\n        let a2: address = @0x42; //0x00000000000000000000000000000042의 약식표현\n        let a3: address = @0xDEADBEEF; // 0x000000000000000000000000DEADBEEF 의 약식표현\n        let a4: address = @0x0000000000000000000000000000000A;//0xA\n        let a5: address = @std; //std라는 이름의 주소에 있는 값을 a5에 할당합니다.\n        let a6: address = @66;\n        let a7: address = @0x42;\n\nmodule 66::some_module {   //표현식 컨텍스트가 아니기 때문에 @ 기호가 필요하지 않습니다.\n    use 0x1::other_module; //표현식 컨텍스트가 아니기 때문에 @ 기호가 필요하지 않습니다.\n    use std::vector;       //다른 모듈을 사용할 때, 네임드 어드레스를 네임스페이스 항목으로 사용할 수 있습니다.\n    ...\n}\n\nmodule std::other_module {  //네임드 어드레스를 네임스페이스 항목으로 사용하여 모듈을 선언할 수 있습니다.\n    ...\n}\n\n\n    }\n}\n"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["명명된 주소(named addresses)는 주소가 사용되는 모든 위치에서 숫자 값 대신 식별자를 사용할 수 있도록 하는 기능입니다. 명명된 주소는 Move 패키지의 최상위 요소(모듈 및 스크립트 외부)로 선언되고 바인딩됩니다. 또한 Move 컴파일러에 인수로 전달될 수도 있습니다. 명명된 주소는 값 수준뿐만 아니라 주소가 사용되는",(0,s.jsx)("span",{style:{color:"purple"},children:"모든 위치"}),"에서 사용될 수 있으며, 소스 언어 수준에서만 존재하며 바이트코드 수준에서는 완전히 해당 값을 ",(0,s.jsx)("span",{style:{color:"purple"},children:"대체"}),"합니다. 따라서 모듈과 모듈 멤버는 모듈의 명명된 주소를 통해 접근해야 하며, 명명된 주소에 할당된 숫자 값으로 모듈 및 모듈 멤버에 접근해서는 안 됩니다. 예를 들어,",(0,s.jsx)("span",{style:{color:"purple"},children:"my_addr이 0x2로 설정된 상태"}),"에서 Move 프로그램이 컴파일되더라도",(0,s.jsx)("span",{style:{color:"purple"},children:"use my_addr::foo는 use 0x2::foo와 동일하지 않습니다"}),". 이 차이점은 모듈과 스크립트 섹션에서 자세히 논의됩니다."]})})}),(0,s.jsx)(r.Z,{xs:12,children:(0,s.jsx)(o.Z,{sx:{width:"100%",marginTop:"30px"},children:(0,s.jsx)(d.Z,{variant:"h4",gutterBottom:!0,children:"글로벌 스토리지 운영"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["주소 값의 주요 목적은 글로벌 스토리지 작업과 상호 작용하는 데에 있습니다. 주소 값은",(0,s.jsx)("span",{style:{color:"purple"},children:"exists, borrow_global, borrow_global_mut, move_from"}),"등의 작업과 함께 사용됩니다. 주소를 사용하지 않는 유일한 글로벌 스토리지 작업은 ",(0,s.jsx)("span",{style:{color:"purple"},children:"move_to"}),"입니다. move_to 작업은",(0,s.jsx)("span",{style:{color:"purple"},children:"signer"})," 를 사용합니다."]})})}),(0,s.jsxs)(r.Z,{xs:12,sx:{marginTop:"10px"},children:[(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:(0,s.jsx)("span",{style:{color:"purple"},children:"*exists: 주소 아래에 T가 저장되어 있으면 true를 반환"})}),(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:(0,s.jsx)("span",{style:{color:"purple"},children:"*borrow_global:address 아래에 저장된 T에 대한 불변 참조를 반환합"})}),(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:(0,s.jsx)("span",{style:{color:"purple"},children:"* borrow_global_mut:address 아래에 저장된 T에 대한 변경 가능한 참조를 반환"})}),(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:(0,s.jsx)("span",{style:{color:"purple"},children:"*move_from:T 주소에서 T를 제거하고 반환"})}),(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:(0,s.jsx)("span",{style:{color:"purple"},children:"* move_to:signer.address 아래에 T를 게시"})})]}),(0,s.jsx)(r.Z,{xs:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",marginTop:"30px"},children:(0,s.jsx)(d.Z,{variant:"h4",gutterBottom:!0,children:"소유권"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:['언어에 내장된 다른 스칼라 값과 마찬가지로 주소 값도 암시적으로 복사 가능(copyable)합니다. 이는 "copy"와 같은',(0,s.jsx)("span",{style:{color:"purple"},children:"명시적인 명령 없이도 주소 값이 복사될 수 있다는 것을 의미"}),"합니다. 주소 값을 새 변수에 할당하거나 함수에 인수로 전달할 때, 주소 값의 복사본이 생성되며 원본과 복사본 주소 모두 독립적으로 사용할 수 있습니다."]})})})]}),F=()=>{let e=(0,A.ZP)(b.Z)(e=>{let{theme:n}=e;return{["&.".concat(f.Z.head)]:{backgroundColor:" #171B1C",color:n.palette.common.white},["&.".concat(f.Z.body)]:{fontSize:12}}}),n=(0,A.ZP)(_.Z)(e=>{let{theme:n}=e;return{"&:nth-of-type(odd)":{backgroundColor:n.palette.common.white,color:n.palette.common.white},"&:last-child td, &:last-child th":{border:0}}});return(0,s.jsxs)(r.Z,{container:!0,children:[(0,s.jsx)(r.Z,{xs:12,children:(0,s.jsx)(o.Z,{sx:{width:"100%"},children:(0,s.jsx)(d.Z,{variant:"h3",gutterBottom:!0,children:"벡터"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["Move에서 제공하는 유일한 원시 컬렉션 타입은",(0,s.jsxs)("span",{style:{color:"purple"},children:[" ","vector<T>"]}),"입니다. ","vector<T>","는 T의 동일한 유형의 항목들로 구성된 컬렉션으로, 값들을 끝에",(0,s.jsx)("span",{style:{color:"purple"},children:"push"}),"하거나 ",(0,s.jsx)("span",{style:{color:"purple"},children:"pop"}),"하여 크기를 조절할 수 있습니다.","vector<T>","는 어떤 유형 T로도 인스턴스화할 수 있습니다. 예를 들어,",(0,s.jsx)("span",{style:{color:"purple"},children:"vector<u64>, vector<address>, vector<0x42::MyModule::MyResource> 및 vector<vector<u8>>"}),"은 모두 유효한 vector 타입입니다."]})})}),(0,s.jsx)(r.Z,{xs:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%"},children:(0,s.jsx)(d.Z,{variant:"h4",gutterBottom:!0,children:"일반적인 벡터 리터럴"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"벡터 리터럴을 사용하여 어떤 유형의 벡터든 생성할 수 있습니다."})})}),(0,s.jsx)(r.Z,{xs:0,md:2}),(0,s.jsx)(r.Z,{xs:12,md:8,sx:{marginTop:"30px"},children:(0,s.jsx)(T.Z,{component:B.Z,children:(0,s.jsxs)(v.Z,{sx:{width:"100%"},"aria-label":"customized table",children:[(0,s.jsx)(w.Z,{children:(0,s.jsxs)(_.Z,{children:[(0,s.jsx)(e,{children:"통사론"}),(0,s.jsx)(e,{children:"타입"}),(0,s.jsx)(e,{children:"설명"})]})}),(0,s.jsx)(y.Z,{component:"div",children:[{통사론:"vector[]",타입:"vector[]: vector<T> where T is any single, non-reference type",설명:"비어있는 벡터"},{통사론:"vector[e1, ..., en]",타입:"vector[e1, ..., en]: vector<T> where e_i: T s.t. 0 < i <= n and n > 0",설명:" n개의 요소가 있는 벡터(길이 n)"}].map(t=>(0,s.jsxs)(n,{children:[(0,s.jsx)(e,{component:"div",scope:"row",children:null==t?void 0:t.통사론}),(0,s.jsx)(e,{children:null==t?void 0:t.타입}),(0,s.jsx)(e,{children:null==t?void 0:t.설명})]}))})]})})}),(0,s.jsx)(r.Z,{xs:0,md:2}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["이러한 경우에는 벡터의 유형이 원소 유형이나 벡터의 사용으로부터 추론됩니다. 유형을 추론할 수 없는 경우 또는 명확성을 위해 유형을",(0,s.jsx)("span",{style:{color:"purple"},children:"명시적"})," 으로 지정할 수도 있습니다."]})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  module example::test {\n    fun main(){\n\n   vector<T>[]: vector<T>\n   vector<T>[e1, ..., en]: vector<T>\n   \n    }\n\n}\n"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  module example::test {\n    fun main(){\n\n(vector[]: vector<bool>);\n(vector[0u8, 1u8, 2u8]: vector<u8>);\n(vector<u128>[]: vector<u128>);\n(vector<address>[@0x42, @0x100]: vector<address>);\n\n\n    }\n"})}),(0,s.jsx)(r.Z,{xs:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%"},children:(0,s.jsxs)(d.Z,{variant:"h4",gutterBottom:!0,children:["vector","<u8>"," 타입의 리터럴"]})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsxs)(o.Z,{sx:{width:"100%",textAlign:"left"},children:[(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["Move에서 벡터를 사용하는 일반적인 사례는",(0,s.jsx)("span",{style:{color:"purple"},children:"바이트 배열"}),"을 나타내는 것인데, 이는",(0,s.jsxs)("span",{style:{color:"purple"},children:[" ","vector<u8>"]}),"로 표현됩니다. 이러한 값들은 종종 공개 키나 해시 결과와 같은 암호화 목적으로 사용됩니다. 이러한 값들은 널리 사용되어 특정 구문이 제공되어 값을 더 가독성 있게 만들어줍니다. 각 개별 u8 값이 숫자 형태로 지정되는 ",(0,s.jsx)("span",{style:{color:"purple"},children:"vector[]"}),"를 사용해야 하는 대신에 특정 구문을 사용할 수 있습니다."]}),(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["현재 지원되는 두 가지 유형의 ","vector<u8>"," 리터럴은",(0,s.jsx)("span",{style:{color:"purple"},children:"바이트 문자열(byte strings)"}),"과",(0,s.jsx)("span",{style:{color:"purple"},children:"16진수 문자열(hex strings)"}),"입니다."]})]})}),(0,s.jsx)(r.Z,{xs:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%"},children:(0,s.jsx)(d.Z,{variant:"h5",gutterBottom:!0,children:"바이트 문자열(Byte Strings)"})})}),(0,s.jsx)(r.Z,{xs:12,children:(0,s.jsxs)(o.Z,{sx:{width:"100%",textAlign:"left"},children:[(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:[(0,s.jsx)("span",{style:{color:"purple"},children:"바이트 문자열"})," 은 b로 접두사가 붙은 따옴표로 둘러싸인 문자열 리터럴입니다. 예를 들어,",(0,s.jsx)("span",{style:{color:"purple"},children:'b"Hello!\\n"'})," 과 같습니다."]}),(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["이는 ",(0,s.jsx)("span",{style:{color:"purple"},children:"ASCII"})," 로 인코딩된 문자열로서",(0,s.jsx)("span",{style:{color:"purple"},children:"이스케이프 시퀀스"})," 를 허용합니다. 현재 지원되는 이스케이프 시퀀스는 다음과 같습니다:"]})]})}),(0,s.jsx)(r.Z,{xs:0,md:2}),(0,s.jsx)(r.Z,{xs:12,md:8,sx:{marginTop:"30px"},children:(0,s.jsx)(T.Z,{component:B.Z,children:(0,s.jsxs)(v.Z,{sx:{width:"100%"},"aria-label":"customized table",children:[(0,s.jsx)(w.Z,{children:(0,s.jsxs)(_.Z,{children:[(0,s.jsx)(e,{children:"이스케이프_시퀀스"}),(0,s.jsx)(e,{children:"설명"})]})}),(0,s.jsx)(y.Z,{component:"div",children:[{이스케이프_시퀀스:"\\n",Description:"새 줄(또는 줄바꿈)"},{이스케이프_시퀀스:"\\r",Description:"캐리지 리턴(Carriage return)"},{이스케이프_시퀀스:"\\t",Description:"Tab"},{이스케이프_시퀀스:"\\\\",Description:"Backslash"},{이스케이프_시퀀스:"\\0",Description:"Null"},{이스케이프_시퀀스:'\\"',Description:"Quote"},{이스케이프_시퀀스:"\\xHH",Description:"Hex escape, inserts the hex byte sequence HH"}].map(t=>(0,s.jsxs)(n,{children:[(0,s.jsx)(e,{component:"div",scope:"row",children:null==t?void 0:t.이스케이프_시퀀스}),(0,s.jsx)(e,{children:null==t?void 0:t.Description})]}))})]})})}),(0,s.jsx)(r.Z,{xs:0,md:2}),(0,s.jsx)(r.Z,{xs:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%"},children:(0,s.jsx)(d.Z,{variant:"h5",gutterBottom:!0,children:"16진수 문자열(Hex Strings)"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["16진수 문자열은 x로 접두사가 붙은 따옴표로 둘러싸인 문자열 리터럴입니다. 예를 들어,",(0,s.jsx)("span",{style:{color:"purple"},children:' x"48656C6C6F210A"'}),"와 같습니다. 각각의 바이트 쌍은",(0,s.jsx)("span",{style:{color:"purple"},children:" 00"}),"부터 ",(0,s.jsx)("span",{style:{color:"purple"},children:"FF"}),"까지의 16진수로 인코딩된 ",(0,s.jsx)("span",{style:{color:"purple"},children:"u8"}),"값을 의미합니다. 따라서 각 바이트 쌍은 결과적인 ","vector<u8>","에서 하나의 항목에 해당합니다. 예시 문자열 리터럴"]})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:'  script {\n    fun byte_and_hex_strings() {\n        assert!(b"" == x"", 0);\n        assert!(b"Hello!\\n" == x"48656C6C6F210A", 1);\n        assert!(b"\\x48\\x65\\x6C\\x6C\\x6F\\x21\\x0A" == x"48656C6C6F210A", 2);\n        assert!(\n            b"\\"Hello\\tworld!\\"\\n \\r \\Null=\\0" ==\n                x"2248656C6C6F09776F726C6421220A200D205C4E756C6C3D00",\n            3\n        );\n    }\n    }\n'})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"vector는 아래와 같이 Move 표준 라이브러리의 std::vector 모듈을 통해 여러 작업을 제공합니다. 시간이 지남에 따라 더 많은 작업이 추가될 수 있습니다. 벡터에 대한 최신 문서는 여기에서 찾을 수 있습니다."})})}),(0,s.jsx)(r.Z,{xs:0,md:2}),(0,s.jsx)(r.Z,{xs:12,md:8,sx:{marginTop:"30px"},children:(0,s.jsx)(T.Z,{component:B.Z,children:(0,s.jsxs)(v.Z,{sx:{width:"100%"},"aria-label":"customized table",children:[(0,s.jsx)(w.Z,{children:(0,s.jsxs)(_.Z,{children:[(0,s.jsx)(e,{children:"Function"}),(0,s.jsx)(e,{children:"Description"}),(0,s.jsx)(e,{children:"Aborts?"})]})}),(0,s.jsx)(y.Z,{component:"div",children:[{Function:"vector::empty<T>(): vector<T>	",Description:"T 유형의 값을 저장할 수 있는 빈 벡터를 만듭니다.",Aborts:"절대"},{Function:"vector::is_empty<T>(): bool",Description:"벡터 v에 요소가 없으면 true를 반환하고 그렇지 않으면 false를 반환합니다.",Aborts:"절대"},{Function:"vector::singleton<T>(t: T): vector<T>",Description:"t를 포함하는 크기 1의 벡터를 만듭니다.",Aborts:"절대"},{Function:"vector::length<T>(v: &vector<T>): u64",Description:"벡터 v의 길이를 반환합니다.",Aborts:"절대"},{Function:"vector::push_back<T>(v: &mut vector<T>, t: T)",Description:"v 끝에 t 추가",Aborts:"절대"},{Function:"vector::pop_back<T>(v: &mut vector<T>): T",Description:"v의 마지막 요소를 제거하고 반환",Aborts:"v가 비어 있는 경우"},{Function:"vector::borrow<T>(v: &vector<T>, i: u64): &T",Description:"인덱스 i에서 T에 대한 불변 참조를 반환합니다.",Aborts:"내가 경계 안에 있지 않다면"},{Function:"vector::borrow_mut<T>(v: &mut vector<T>, i: u64): &mut T",Description:"인덱스 i에서 T에 대한 변경 가능한 참조를 반환합니다.",Aborts:"내가 경계 안에 있지 않다면"},{Function:"vector::destroy_empty<T>(v: vector<T>)",Description:"v 삭제",Aborts:"v가 비어 있지 않은 경우"},{Function:"vector::append<T>(v1: &mut vector<T>, v2: vector<T>)",Description:"v2의 요소를 v1의 끝에 추가",Aborts:"절대"},{Function:"vector::reverse_append<T>(lhs: &mut vector<T>, other: vector<T>)",Description:"다른 벡터에서 발생한 것과 반대 순서로 다른 벡터의 모든 요소를 ​​lhs 벡터로 푸시합니다.",Aborts:"절대"},{Function:"vector::contains<T>(v: &vector<T>, e: &T): bool",Description:"e가 벡터 v에 있으면 참을 반환합니다. 그렇지 않으면 거짓을 반환합니다.",Aborts:"절대"},{Function:"vector::swap<T>(v: &mut vector<T>, i: u64, j: u64)",Description:"벡터 v의 i번째 인덱스와 j번째 인덱스에 있는 요소를 교체합니다.",Aborts:"i 또는 j가 범위를 벗어난 경우"},{Function:"vector::reverse<T>(v: &mut vector<T>)",Description:"제자리에서 벡터 v의 요소 순서를 반대로 바꿉니다.",Aborts:"절대"},{Function:"vector::reverse_slice<T>(v: &mut vector<T>, l: u64, r: u64)",Description:"제자리에서 벡터 v의 요소 [l, r)의 순서를 반대로 바꿉니다.",Aborts:"절대"},{Function:"vector::index_of<T>(v: &vector<T>, e: &T): (bool, u64)",Description:"e가 인덱스 i의 벡터 v에 있으면 (true, i)를 반환합니다. 그렇지 않으면 (거짓, 0)을 반환합니다.",Aborts:"절대"},{Function:"vector::insert<T>(v: &mut vector<T>, i: u64, e: T)",Description:"O(길이 - i) 시간을 사용하여 위치 0 <= i <= 길이에 새 요소 e를 삽입합니다.",Aborts:"내가 범위를 벗어나면"},{Function:"vector::remove<T>(v: &mut vector<T>, i: u64): T",Description:"벡터 v의 i번째 요소를 제거하고 모든 후속 요소를 이동합니다. 이것은 O(n)이며 벡터에서 요소의 순서를 유지합니다.",Aborts:"내가 범위를 벗어나면"},{Function:"vector::swap_remove<T>(v: &mut vector<T>, i: u64): T",Description:"벡터 v의 i번째 요소를 마지막 요소로 바꾼 다음 요소를 팝합니다. 이것은 O(1)이지만 벡터의 요소 순서는 유지하지 않습니다.",Aborts:"내가 범위를 벗어나면"},{Function:"vector::trim<T>(v: &mut vector<T>, new_len: u64): u64",Description:"벡터 v를 더 작은 크기의 new_len으로 자르고 제거된 요소를 순서대로 반환합니다.",Aborts:"new_len이 v의 길이보다 큽니다."},{Function:"vector::trim_reverse<T>(v: &mut vector<T>, new_len: u64): u64",Description:"벡터 v를 더 작은 크기의 new_len으로 자르고 제거된 요소를 역순으로 반환합니다.",Aborts:"new_len이 v의 길이보다 큽니다."},{Function:"vector::rotate<T>(v: &mut vector<T>, rot: u64): u64",Description:"rotate(&mut [1, 2, 3, 4, 5], 2) -> [3, 4, 5, 1, 2] 제자리에서 분할 지점을 반환합니다. 이 예에서 3",Aborts:"절대"},{Function:"vector::rotate_slice<T>(v: &mut vector<T>, left: u64, rot: u64, right: u64): u64",Description:"왼쪽 <= 회전 <= 오른쪽으로 길게 [ 왼쪽, 오른쪽 회전), 끝점 반환",Aborts:"절대"}].map(t=>(0,s.jsxs)(n,{children:[(0,s.jsx)(e,{component:"div",scope:"row",children:null==t?void 0:t.Function}),(0,s.jsx)(e,{component:"div",scope:"row",children:null==t?void 0:t.Description}),(0,s.jsx)(e,{children:null==t?void 0:t.Aborts})]}))})]})})}),(0,s.jsx)(r.Z,{xs:0,md:2}),(0,s.jsx)(r.Z,{xs:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%"},children:(0,s.jsx)(d.Z,{variant:"h4",gutterBottom:!0,children:"Example"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  module example::test {\n    use std::vector;\n    \n    fun main(){\n      let v = vector::empty<u64>();\n      vector::push_back(&mut v, 5);\n      vector::push_back(&mut v, 6);\n\n      assert!(*vector::borrow(&v, 0) == 5, 42);\n      assert!(*vector::borrow(&v, 1) == 6, 42);\n      assert!(vector::pop_back(&mut v) == 6, 42);\n      assert!(vector::pop_back(&mut v) == 5, 42);\n    }\n"})}),(0,s.jsx)(r.Z,{xs:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%"},children:(0,s.jsx)(d.Z,{variant:"h4",gutterBottom:!0,children:"벡터 파괴 및 복사"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:[(0,s.jsx)("span",{style:{color:"purple"},children:"vector<T>"}),"의 일부 동작은 원소 유형 T의 기능에 따라 달라집니다. 예를 들어,",(0,s.jsx)("span",{style:{color:"purple"},children:" 드롭(drop) "}),"기능이 없는 원소를 포함하는 벡터는 위의 예시에서 v와 같이 암묵적으로 폐기될 수 없으며, 명시적으로",(0,s.jsx)("span",{style:{color:"purple"},children:" vector::destroy_empty"}),"를 사용하여 파괴해야 합니다.",(0,s.jsx)("span",{style:{color:"purple"},children:" vector::destroy_empty"}),"는 vec에 원소가 없을 경우에만 실행 시점에서 중단됩니다:"]})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  module example::test {\n    fun destory_any_vector<T>(vec:vector<T>){\n     vector::destory_empty(vec)//이 줄을 삭제하면 컴파일러 오류가 발생합니다.\n    }\n }\n"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["하지만 ",(0,s.jsx)("span",{style:{color:"purple"},children:" 드롭(drop) "}),"기능이 있는 원소를 포함하는 벡터를 폐기하려고 할 때 오류가 발생하지는 않습니다."]})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  module example::test {\n    fun destroy_droppable_vector<T: drop>(vec: vector<T>) {\n       // 유효한!\n       // 벡터를 파괴하기 위해 명시적으로 수행할 필요가 없습니다.\n       // nothing needs to be done explicitly to destroy the vector\n   }\n   }\n"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["마찬가지로, 원소 유형이",(0,s.jsx)("span",{style:{color:"purple"},children:"복사 가능한 경우"}),"에만 벡터를 복사할 수 있습니다. 다시 말해, T가 복사 가능한 경우에만","vector<T>","가 복사 가능합니다. 그러나 복사 가능한 벡터조차도 암묵적으로 복사되지는 않습니다."]})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  module example::test {\n    fun example(){\n        let x = vector::singleton<u64>(10);\n        let y = copy x; // 사본이 없는 컴파일러 오류!\n    }\n    }\n"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["대용량 벡터의 복사는 비용이 많이 들 수 있으므로 컴파일러는 복사가 명시적으로 이루어지도록 요구하여 어디에서 복사가 발생하는지 쉽게 파악할 수 있도록 합니다. 자세한 내용은",(0,s.jsx)("span",{style:{color:"purple"},children:"유형 능력(type abilities)"}),"과",(0,s.jsx)("span",{style:{color:"purple"},children:"제네릭(generics) "}),"섹션을 참조하십시오."]})})}),(0,s.jsx)(r.Z,{xs:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%"},children:(0,s.jsx)(d.Z,{variant:"h4",gutterBottom:!0,children:"소유권"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["위에서 언급한 대로,",(0,s.jsx)("span",{style:{color:"purple"},children:"원소가 복사 가능한 경우"}),"에만 벡터 값들을 복사할 수 있습니다. 이 경우에는 복사가 명시적으로 이루어져야 하며, 복사 또는",(0,s.jsx)("span",{style:{color:"purple"},children:" 역참조 *"}),"를 통해 이루어집니다."]})})})]})},E=()=>{let e=(0,A.ZP)(b.Z)(e=>{let{theme:n}=e;return{["&.".concat(f.Z.head)]:{backgroundColor:" #171B1C",color:n.palette.common.white},["&.".concat(f.Z.body)]:{fontSize:12}}}),n=(0,A.ZP)(_.Z)(e=>{let{theme:n}=e;return{"&:nth-of-type(odd)":{backgroundColor:n.palette.common.white,color:n.palette.common.white},"&:last-child td, &:last-child th":{border:0}}});return(0,s.jsxs)(r.Z,{container:!0,children:[(0,s.jsx)(r.Z,{xs:12,children:(0,s.jsx)(o.Z,{sx:{width:"100%"},children:(0,s.jsx)(d.Z,{variant:"h3",gutterBottom:!0,children:"서명자"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:[(0,s.jsx)("span",{style:{color:"purple"},children:"서명자 "}),"는 기본 제공 이동 자원 유형입니다. 서명자는",(0,s.jsx)("span",{style:{color:"purple"},children:"소유자가 특정 주소를 대신하여 작업"}),"할 수 있도록 하는 기능입니다. 기본 구현을 다음과 같이 생각할 수 있습니다."]})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  module example::test {\n    struct signer has drop{\n     a:address\n    }\n }\n"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["서명자는 이동 외부의 코드(예:",(0,s.jsx)("span",{style:{color:"purple"},children:"암호화 서명 또는 암호 확인 "}),")로 인증된 사용자를 나타낸다는 점에서 Unix UID와 다소 유사합니다."]})})}),(0,s.jsx)(r.Z,{xs:12,children:(0,s.jsx)(o.Z,{sx:{width:"100%"},children:(0,s.jsx)(d.Z,{variant:"h4",gutterBottom:!0,children:"주소 비교"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"Move 프로그램은 주소 리터럴을 사용하여 특별한 권한 없이 모든 주소 값을 만들 수 있습니다."})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  module example::test {\n    fun main(){\n     let a1= @0x1;\n     let a1= @0x2;\n     // ... 다른 모든 가능한 주소에 대해 등등\n    }\n }\n"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["그러나 서명자 값은 리터럴이나 지침을 통해 생성할 수 없고",(0,s.jsx)("span",{style:{color:"purple"},children:"Move VM에서만 생성 "})," 할 수 있기 때문에 특별합니다. VM이 서명자 유형의 매개변수를 사용하여 스크립트를 실행하기 전에 서명자 값을 자동으로 생성하여 스크립트에 전달합니다."]})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  script {\n    use std::signer;\n    fun main(s: signer) {\n        assert!(signer::address_of(&s) == @0x42, 0);\n    }\n}\n"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"스크립트가 0x42 이외의 주소에서 전송되면 이 스크립트는 코드 0으로 중단됩니다. 트랜잭션 스크립트는 서명자가 다른 인수의 접두사인 한 임의의 수의 서명자를 가질 수 있습니다. 즉, 모든 서명자 인수가 먼저 와야 합니다."})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  script {\n    use std::signer;\n    fun main(s1: signer, s2: signer, x: u64, y: u8) {\n        // ...\n    }\n}\n"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"이는 여러 당사자의 권한으로 원자적으로 작동하는 다중 서명자 스크립트를 구현하는 데 유용합니다. 예를 들어, 위 스크립트의 확장은 s1과 s2 사이에 원자 통화 스왑을 수행할 수 있습니다."})})}),(0,s.jsx)(r.Z,{xs:12,children:(0,s.jsx)(o.Z,{sx:{width:"100%"},children:(0,s.jsx)(d.Z,{variant:"h4",gutterBottom:!0,children:"서명자 연산자"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:[(0,s.jsx)("span",{style:{color:"purple"},children:" std::signer "})," 표준 라이브러리 모듈은 서명자 값에 대해 두 가지 유틸리티 기능을 제공합니다."]})})}),(0,s.jsx)(r.Z,{xs:0,md:2}),(0,s.jsx)(r.Z,{xs:12,md:8,sx:{marginTop:"30px"},children:(0,s.jsx)(T.Z,{component:B.Z,children:(0,s.jsxs)(v.Z,{sx:{width:"100%"},"aria-label":"customized table",children:[(0,s.jsx)(w.Z,{children:(0,s.jsxs)(_.Z,{children:[(0,s.jsx)(e,{children:"함수"}),(0,s.jsx)(e,{children:"설명"})]})}),(0,s.jsx)(y.Z,{component:"div",children:[{함수:"signer::address_of(&signer): address	",설명:"이 &signer로 래핑된 주소를 반환합니다."},{함수:"signer::borrow_address(&signer): &address		",설명:"이 &signer로 래핑된 주소에 대한 참조를 반환합니다."}].map(t=>(0,s.jsxs)(n,{children:[(0,s.jsx)(e,{children:null==t?void 0:t.함수}),(0,s.jsx)(e,{children:null==t?void 0:t.설명})]}))})]})})}),(0,s.jsx)(r.Z,{xs:0,md:2}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["또한",(0,s.jsxs)("span",{style:{color:"purple"},children:["move_to","<T>","(&signer, T)"]}),"전역 저장소 연산자는 signer.address의 계정에 리소스 T를 게시하기 위해 ",(0,s.jsx)("span",{style:{color:"purple"},children:"&signer "}),"인수가 필요합니다. 이렇게 하면 인증된 사용자만 자신의 주소로 리소스를 게시하도록 선택할 수 있습니다."]})})}),(0,s.jsx)(r.Z,{xs:12,children:(0,s.jsx)(o.Z,{sx:{width:"100%"},children:(0,s.jsx)(d.Z,{variant:"h4",gutterBottom:!0,children:"소유권"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["단순 스칼라 값과 달리 서명자 값은 복사할 수 없습니다. 즉",(0,s.jsx)("span",{style:{color:"purple"},children:"명시적 복사 명령을 통해서이든 역참조 *를 통해서든 어떤 작업에서도 복사할 수 없습니다."})]})})})]})},k=()=>{let e=(0,A.ZP)(b.Z)(e=>{let{theme:n}=e;return{["&.".concat(f.Z.head)]:{backgroundColor:" #171B1C",color:n.palette.common.white},["&.".concat(f.Z.body)]:{fontSize:12}}}),n=(0,A.ZP)(_.Z)(e=>{let{theme:n}=e;return{"&:nth-of-type(odd)":{backgroundColor:n.palette.common.white,color:n.palette.common.white},"&:last-child td, &:last-child th":{border:0}}});return(0,s.jsxs)(r.Z,{container:!0,children:[(0,s.jsx)(r.Z,{xs:12,children:(0,s.jsx)(o.Z,{sx:{width:"100%"},children:(0,s.jsx)(d.Z,{variant:"h3",gutterBottom:!0,children:"참조"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["Move에는 ",(0,s.jsx)("span",{style:{color:"purple"},children:"불변 &"}),"및",(0,s.jsx)("span",{style:{color:"purple"},children:"가변 &mut"}),"의 두 가지 유형의 참조가 있습니다. 변경할 수 없는 참조는",(0,s.jsx)("span",{style:{color:"purple"},children:" 읽기 전용"}),"이며 기본 값(또는 해당 필드)을 수정할 수 없습니다. 변경 가능한 참조는 해당 참조를 통한",(0,s.jsx)("span",{style:{color:"purple"},children:"쓰기를 통한 수정"}),"을 허용합니다. Move의 유형 시스템은 참조 오류를 방지하는 소유권 규율을 적용합니다. 참조 규칙에 대한 자세한 내용은 구조체 및 리소스를 참조하세요."]})})}),(0,s.jsx)(r.Z,{xs:12,children:(0,s.jsx)(o.Z,{sx:{width:"100%",marginTop:"30px"},children:(0,s.jsx)(d.Z,{variant:"h4",gutterBottom:!0,children:"참조 연산자"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["Move는 참조를 만들고 확장할 뿐만 아니라 변경 가능한 참조를 변경 불가능한 참조로 변환하기 위한 연산자를 제공합니다. 여기와 다른 곳에서는",(0,s.jsx)("span",{style:{color:"purple"},children:'"표현식 e에는 T 유형이 있음"'}),"에 대해 표기법 ",(0,s.jsx)("span",{style:{color:"purple"},children:" e: T"}),"를 사용합니다."]})})}),(0,s.jsx)(r.Z,{xs:0,md:2}),(0,s.jsx)(r.Z,{xs:12,md:8,sx:{marginTop:"30px"},children:(0,s.jsx)(T.Z,{component:B.Z,children:(0,s.jsxs)(v.Z,{sx:{width:"100%"},"aria-label":"customized table",children:[(0,s.jsx)(w.Z,{children:(0,s.jsxs)(_.Z,{children:[(0,s.jsx)(e,{children:"통사론"}),(0,s.jsx)(e,{children:"타입"}),(0,s.jsx)(e,{children:"설명"})]})}),(0,s.jsx)(y.Z,{component:"div",children:[{통사론:"&e",타입:"&T where e: T and T is a non-reference type	",설명:"e에 대한 불변 참조 생성"},{통사론:"&mut e",타입:"&mut T where e: T and T is a non-reference type	",설명:"e에 대한 변경 가능한 참조를 만듭니다."},{통사론:"&e.f",타입:"&T where e.f: T",설명:"구조체 e의 필드 f에 대한 불변 참조를 만듭니다."},{통사론:"&mut e.f",타입:"&mut T where e.f: T	",설명:"구조체의 필드 f에 대한 변경 가능한 참조를 만듭니다."},{통사론:"freeze(e)",타입:"&T where e: &mut T	",설명:"가변 참조 e를 불변 참조로 변환합니다."}].map(t=>(0,s.jsxs)(n,{children:[(0,s.jsx)(e,{children:null==t?void 0:t.통사론}),(0,s.jsx)(e,{children:null==t?void 0:t.타입}),(0,s.jsx)(e,{children:null==t?void 0:t.설명})]}))})]})})}),(0,s.jsx)(r.Z,{xs:0,md:2}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:[(0,s.jsx)("span",{style:{color:"purple"},children:" &e.f"}),"및",(0,s.jsx)("span",{style:{color:"purple"},children:" &mut e.f "}),"연산자는 구조체에 대한 새 참조를 만들거나 기존 참조를 확장하는 데 모두 사용할 수 있습니다."]})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  module example::test {\n    fun  main(){\n      let s= S {f:10}\n      let f_ref1:&u64 = &s.f; //공장\n      let s_ref:&S= &s;\n      let f_ref2: &u64= &s_ref.f //또한 작동\n    }\n   }\n"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"여러 필드가 있는 참조 표현식은 두 구조체가 동일한 모듈에 있는 한 작동합니다."})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  module example::test {\n    struct A {b:B}\n \n    struct B {\n        c:u64\n    }\n \n    fun f(a:&A): &u64{\n       &a.b.c\n    }\n }\n"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["마지막으로 참조에 대한 참조는",(0,s.jsx)("span",{style:{color:"purple"},children:"허용되지 않습니다."})]})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  module example::test {\n    fun main(){\n  \n      let x= 7;\n      let y:&u64= &x;\n      let z:&&u64= &y;//컴파일 되지 않습니다.\n    }\n  }\n"})}),(0,s.jsx)(r.Z,{xs:12,children:(0,s.jsx)(o.Z,{sx:{width:"100%",marginTop:"30px"},children:(0,s.jsx)(d.Z,{variant:"h4",gutterBottom:!0,children:"참고 문헌을 통한 읽기 및 쓰기"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["변경 가능한 참조와 변경 불가능한 참조를 모두 읽어 참조된 값의",(0,s.jsx)("span",{style:{color:"purple"},children:"복사본"}),"을 생성할 수 있습니다. 변경 가능한 참조만 작성할 수 있습니다. 쓰기",(0,s.jsx)("span",{style:{color:"purple"},children:" *x = v"}),"는 이전에 x에 저장된 값을 버리고 v로 업데이트합니다. 두 작업 모두 C와 유사한",(0,s.jsx)("span",{style:{color:"purple"},children:"* 구문"}),"을 사용합니다. 그러나 읽기는 표현식인 반면 쓰기는 등호의 왼쪽에서 발생해야 하는 변형입니다."]})})}),(0,s.jsx)(r.Z,{xs:0,md:2}),(0,s.jsx)(r.Z,{xs:12,md:8,sx:{marginTop:"30px"},children:(0,s.jsx)(T.Z,{component:B.Z,children:(0,s.jsxs)(v.Z,{sx:{width:"100%"},"aria-label":"customized table",children:[(0,s.jsx)(w.Z,{children:(0,s.jsxs)(_.Z,{children:[(0,s.jsx)(e,{children:"통사론"}),(0,s.jsx)(e,{children:"타입"}),(0,s.jsx)(e,{children:"설명"})]})}),(0,s.jsx)(y.Z,{component:"div",children:[{통사론:"*e",타입:"T where e is &T or &mut T	",설명:"e가 가리키는 값을 읽습니다."},{통사론:"*e1 = e2	",타입:"() where e1: &mut T and e2: T	",설명:"e1의 값을 e2로 업데이트합니다."}].map(t=>(0,s.jsxs)(n,{children:[(0,s.jsx)(e,{children:null==t?void 0:t.통사론}),(0,s.jsx)(e,{children:null==t?void 0:t.타입}),(0,s.jsx)(e,{children:null==t?void 0:t.설명})]}))})]})})}),(0,s.jsx)(r.Z,{xs:0,md:2}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["참조를 읽으려면 기본 유형에",(0,s.jsx)("span",{style:{color:"purple"},children:"복사"}),"기능이 있어야 합니다. 참조를 읽으면 값의 새 복사본이 생성되기 때문입니다.",(0,s.jsx)("span",{style:{color:"purple"},children:"이 규칙은 리소스 값 복사를 방지합니다."})]})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  module example::test {\n    fun copy_resource_via_ref_bad(c:Coin){\n      let c_ref= &c;\n      let counterfeit:Coin= *c_ref;//허용되지 않습니다!\n      pay(c);\n      pay(counterfeit);\n    }\n  }\n"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["이중: 참조를 작성하려면 기본 유형에 삭제 기능이 있어야 합니다. 참조에 작성하면 이전 값이 삭제 (",(0,s.jsx)("span",{style:{color:"purple"},children:'또는 "삭제"'}),")되기 때문입니다. 이 규칙은 리소스 값의 파괴를 방지합니다."]})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  module example::test {\n    fun destroy_resource_via_ref_bad(ten_coins:Coin,c:Coin){\n     let ref= &mut ten_coins;\n     *ref =c;//허용되지 않음-10개의 코인을 파괴합니다!\n    }\n }\n"})}),(0,s.jsx)(r.Z,{xs:12,children:(0,s.jsx)(o.Z,{sx:{width:"100%"},children:(0,s.jsx)(d.Z,{variant:"h4",gutterBottom:!0,children:"동결 추론"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"변경 불가능한 참조가 예상되는 상황에서 변경 가능한 참조를 사용할 수 있습니다."})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  module example::test {\n    fun main(){\n      let x=  7;\n      let y= &u64= &mut x;\n    }\n  }\n"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"이는 내부적으로 컴파일러가 필요한 곳에 고정 명령을 삽입하기 때문에 작동합니다. 다음은 고정 추론의 몇 가지 예입니다."})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  module example::test {\n    fun takes_immut_returns_immut(x:&u64):&u64{x}\n \n    //반환값에 대한 추론 고정\n    fun takes_mut_returns_immut(x:&mut u64):&u64{x}\n \n    fun expression_examples(){\n \n     let x= 0;\n     let y= 0;\n     takes_immut_returns_immut(&x);//추론없음\n     takes_immut_returns_immut(&mut x);//추정 동결(&mut x)\n     takes_mut_returns_immut(&mut x);//추론없음\n \n     assert!(&x == &mut y,42);//추정 동결(&mut y)\n    }\n    \n \n    fun assignment_examples(){\n       let x= 0;\n       let y= 0;\n       let imm_ref:&u64 = &x;\n \n       imm_ref= &x;//추론없음\n       imm_ref= &mut y;//추정 동결(&mut y)\n     \n    }\n \n    \n    \n    }\n"})}),(0,s.jsx)(r.Z,{xs:12,children:(0,s.jsx)(o.Z,{sx:{width:"100%"},children:(0,s.jsx)(d.Z,{variant:"h4",gutterBottom:!0,children:"하위 유형"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["이 동결 추론을 통해 Move 유형 검사기는",(0,s.jsx)("span",{style:{color:"purple"},children:"&mut T"}),"를",(0,s.jsx)("span",{style:{color:"purple"},children:"&T"}),"의 하위 유형으로 볼 수 있습니다. 위에 표시된 것처럼 이것은 &T 값이 사용되는 모든 표현식에 대해 &mut T 값도 사용할 수 있음을 의미합니다. 이 용어는 &T가 제공된 곳에 &mut T가 필요했음을 간결하게 나타내기 위해 오류 메시지에 사용됩니다. 예를 들어"]})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  address 0x42 {\n    module example{\n        fun read_and_assign(store:&mut u64,new_value:&u64){\n            *store= *new_value\n        }\n\n        fun subtype_examples(){\n            let x:&u64 = &0;\n            let y:&mut u64= &mut 1;\n\n            x= &mut 1;//유효한\n            y= &2 //유효하지 않은\n\n            read_and_assign(y,x);//유효한\n            read_and_assign(x,y);//유효하지 않은\n        }  \n    }\n}\n"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"다음과 같은 오류 메시지가 나타납니다"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  error:\n\n  ┌── example.move:12:9 ───\n  │\n12 │         y = &2; // 유효하지 않은!\n  │         ^ Invalid assignment to local 'y'\n  \xb7\n12 │         y = &2; // 유효하지 않음!\n  │             -- The type: '&{integer}'\n  \xb7\n9 │         let y: &mut u64 = &mut 1;\n  │                -------- Is not a subtype of: '&mut u64'\n  │\n\nerror:\n\n  ┌── example.move:15:9 ───\n  │\n15 │         read_and_assign(x, y); // 유효하지 않음!\n  │         ^^^^^^^^^^^^^^^^^^^^^ Invalid call of '0x42::example::read_and_assign'. Invalid argument for parameter 'store'\n  \xb7\n8 │         let x: &u64 = &0;\n  │                ---- The type: '&u64'\n  \xb7\n3 │     fun read_and_assign(store: &mut u64, new_value: &u64) {\n  │                                -------- Is not a subtype of: '&mut u64'\n  │\n"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["현재 하위 유형이 있는 유일한 다른 유형은",(0,s.jsx)("span",{style:{color:"purple"},children:"튜플"}),"입니다."]})})}),(0,s.jsx)(r.Z,{xs:12,children:(0,s.jsx)(o.Z,{sx:{width:"100%"},children:(0,s.jsx)(d.Z,{variant:"h4",gutterBottom:!0,children:"소유권"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"동일한 참조의 기존 복사본이나 확장이 있더라도 변경 가능한 참조와 변경 불가능한 참조는 항상 복사 및 확장될 수 있습니다."})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  module example::test {\n    fun reference_copies(s:&mut S){\n      let s_copy1=s;//유효\n      let s_extension= &mut s.f;//유효\n      let s_copy2 = s;//유효\n    }\n  }\n"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"이것은 위의 코드를 거부하는 Rust의 소유권 시스템에 익숙한 프로그래머에게는 놀라운 일이 될 수 있습니다. Move의 타입 시스템은 복사본 처리에 있어서 더 관대하지만 쓰기 전에 변경 가능한 참조의 고유한 소유권을 보장하는 데 있어서도 똑같이 엄격합니다."})})}),(0,s.jsx)(r.Z,{xs:12,children:(0,s.jsx)(o.Z,{sx:{width:"100%"},children:(0,s.jsx)(d.Z,{variant:"h4",gutterBottom:!0,children:"참조를 저장할 수 없음"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:[(0,s.jsx)("span",{style:{color:"purple"},children:"참조"})," 와",(0,s.jsx)("span",{style:{color:"purple"},children:"튜플"}),"은 구조체의 필드 값으로 저장할 수 없는 ",(0,s.jsx)("span",{style:{color:"purple"},children:"유일한 유형"}),"이며, 이는",(0,s.jsx)("span",{style:{color:"purple"},children:"전역 저장소에 존재할 수 없음을 의미"}),"하기도 합니다. 프로그램 실행 중에 생성된 모든 참조는",(0,s.jsx)("span",{style:{color:"purple"},children:"Move 프로그램이 종료될 때 삭제"}),"됩니다. 그들은 완전히",(0,s.jsx)("span",{style:{color:"purple"},children:" 일시적"})," 입니다. 이 불변성은 저장 기능이 없는 유형의 값에도 적용되지만 참조와 튜플은 애초에 구조체에서 허용되지 않음으로써 한 단계 더 나아갑니다. 이것은 Move와 Rust의 또 다른 차이점으로, 구조체 내부에 참조를 저장할 수 있습니다. 현재 Move는 참조를 직렬화할 수 없기 때문에 이를 지원할 수 없지만 모든 Move 값은 직렬화 가능해야 합니다. 이 요구 사항은 프로그램 실행 간에 값을 유지하기 위해 값을 직렬화해야 하는 Move의 영구 전역 저장소에서 비롯됩니다.",(0,s.jsx)("span",{style:{color:"purple"},children:"구조체는 전역 저장소에 쓸 수 있으므로 직렬화 가능해야 합니다."}),"참조를 구조체에 저장하고 해당 구조체가 전역 저장소에 존재하는 것을 금지하는 더 멋지고 표현력이 뛰어난 유형 시스템을 상상할 수 있습니다. 저장 기능이 없는 구조체 내부의 참조를 허용할 수도 있지만 문제를 완전히 해결하지는 못합니다. Move에는 정적 참조 안전성을 추적하는 상당히 복잡한 시스템이 있으며 유형 시스템의 이러한 측면도 확장해야 합니다. 구조체 내부에 참조 저장을 지원합니다. 요컨대, Move의 유형 시스템(특히 참조 안전성에 관한 측면)은 저장된 참조를 지원하도록 확장되어야 합니다. 그러나 그것은 언어가 발전함에 따라 우리가 주시하고 있는 것입니다."]})})})]})},z=()=>{let e=(0,A.ZP)(b.Z)(e=>{let{theme:n}=e;return{["&.".concat(f.Z.head)]:{backgroundColor:" #171B1C",color:n.palette.common.white},["&.".concat(f.Z.body)]:{fontSize:12}}}),n=(0,A.ZP)(_.Z)(e=>{let{theme:n}=e;return{"&:nth-of-type(odd)":{backgroundColor:n.palette.common.white,color:n.palette.common.white},"&:last-child td, &:last-child th":{border:0}}});return(0,s.jsxs)(r.Z,{container:!0,children:[(0,s.jsx)(r.Z,{xs:12,children:(0,s.jsx)(o.Z,{sx:{width:"100%"},children:(0,s.jsx)(d.Z,{variant:"h3",gutterBottom:!0,children:"튜플 및 단위"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["Move는 튜플을 일급 값으로 사용하는 다른 언어에서 온 것으로 예상할 수 있으므로 튜플을 완전히 지원하지 않습니다. 그러나 여러 반환 값을 지원하기 위해 Move에는",(0,s.jsx)("span",{style:{color:"purple"},children:" 튜플과 같은 표현식"}),"이 있습니다. 이러한 식은 런타임에 구체적인 값을 생성하지 않으며(",(0,s.jsx)("span",{style:{color:"purple"},children:"바이트코드에 튜플이 없음"}),") 결과적으로 매우 제한적입니다. 식에만 나타날 수 있습니다(",(0,s.jsx)("span",{style:{color:"purple"},children:"일반적으로 함수의 반환 위치"}),"). 지역 변수에 바인딩할 수 없습니다. 구조체에 저장할 수 없습니다. 제네릭을 인스턴스화하는 데 튜플 유형을 사용할 수 없습니다. 마찬가지로 ",(0,s.jsx)("span",{style:{color:"purple"},children:"unit()"}),"은 표현식 기반이 되기 위해 Move 소스 언어에서 만든 유형입니다. 단위 값()은 런타임 값을 생성하지 않습니다.",(0,s.jsx)("span",{style:{color:"purple"},children:"unit()"})," 을 빈 튜플로 간주할 수 있으며 튜플에 적용되는 모든 제한 사항이 유닛에도 적용됩니다. 이러한 제한 사항을 감안할 때 언어에 튜플이 있는 것이 이상하게 느껴질 수 있습니다. 그러나 다른 언어에서 튜플의 가장 일반적인 사용 사례 중 하나는 함수가 여러 값을 반환할 수 있도록 하는 함수입니다. 일부 언어는 사용자가 여러 반환 값을 포함하는 구조체를 작성하도록 강제하여 이 문제를 해결합니다. 그러나 Move에서는",(0,s.jsx)("span",{style:{color:"purple"},children:"구조체 내부에 참조를 넣을 수 없습니다."}),"여러 반환 값을 지원하려면 Move가 필요했습니다. 이러한 여러 반환 값은 모두 바이트 코드 수준에서 스택에 푸시됩니다. 소스 수준에서 이러한 여러 반환 값은 튜플을 사용하여 표시됩니다."]})})}),(0,s.jsx)(r.Z,{xs:12,children:(0,s.jsx)(o.Z,{sx:{width:"100%"},children:(0,s.jsx)(d.Z,{variant:"h4",gutterBottom:!0,children:"리터럴"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"튜플은 괄호 안에 쉼표로 구분된 표현식 목록으로 생성됩니다."})})}),(0,s.jsx)(r.Z,{xs:0,md:2}),(0,s.jsx)(r.Z,{xs:12,md:8,sx:{marginTop:"30px"},children:(0,s.jsx)(T.Z,{component:B.Z,children:(0,s.jsxs)(v.Z,{sx:{width:"100%"},"aria-label":"customized table",children:[(0,s.jsx)(w.Z,{children:(0,s.jsxs)(_.Z,{children:[(0,s.jsx)(e,{children:"통사론"}),(0,s.jsx)(e,{children:"타입"}),(0,s.jsx)(e,{children:"설명"})]})}),(0,s.jsx)(y.Z,{component:"div",children:[{통사론:"()",타입:"(): ()",설명:"단위, 빈 튜플 또는 인수가 0인 튜플"},{통사론:"(e1, ..., en)",타입:"(e1, ..., en): (T1, ..., Tn) where e_i: Ti s.t. 0 < i <= n and n > 0",설명:"n-튜플, 개수 n의 튜플, n개의 요소가 있는 튜플"}].map(t=>(0,s.jsxs)(n,{children:[(0,s.jsx)(e,{children:null==t?void 0:t.통사론}),(0,s.jsx)(e,{children:null==t?void 0:t.타입}),(0,s.jsx)(e,{children:null==t?void 0:t.설명})]}))})]})})}),(0,s.jsx)(r.Z,{xs:0,md:2}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:[(0,s.jsx)("span",{style:{color:"purple"},children:"(e)"})," 에는",(0,s.jsx)("span",{style:{color:"purple"},children:"(e): (t)"})," 유형이 없습니다. 즉,",(0,s.jsx)("span",{style:{color:"purple"},children:"하나의 요소가 있는 튜플이 없습니다."}),"괄호 안에 하나의 요소만 있는 경우 괄호는 명확성을 위해서만 사용되며 다른 특별한 의미는 없습니다. 때로는 요소가 두 개인 튜플을",(0,s.jsx)("span",{style:{color:"purple"},children:' "쌍"'}),"이라고 하고 요소가 세 개인 튜플을 ",(0,s.jsx)("span",{style:{color:"purple"},children:' "트리플"'}),"이라고 합니다."]})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:'  address 0x42 {\n    module example {\n        // 이 세 가지 기능은 모두 동일합니다.\n    \n    //반환 유형이 제공되지 않으면 ()로 간주됩니다.\n        fun returns_unit_1() { }\n    \n    \n    // 빈 표현식 블록에 암시적() 값이 있습니다.\n        fun returns_unit_2(): () { }\n    \n    \n    // returns_unit_1 및 returns_unit_2의 명시적 버전\n        fun returns_unit_3(): () { () }\n    \n    \n        fun returns_3_values(): (u64, bool, address) {\n            (0, false, @0x42)\n        }\n        fun returns_4_values(x: &u64): (&u64, u8, u128, vector<u8>) {\n            (x, 0, 1, b"foobar")\n        }\n    }\n    }\n'})}),(0,s.jsx)(r.Z,{xs:12,children:(0,s.jsx)(o.Z,{sx:{width:"100%"},children:(0,s.jsx)(d.Z,{variant:"h4",gutterBottom:!0,children:"Operations"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["현재 튜플에서 수행할 수 있는 유일한 작업은",(0,s.jsx)("span",{style:{color:"purple"},children:"구조 분해"})," 입니다."]})})}),(0,s.jsx)(r.Z,{xs:12,children:(0,s.jsx)(o.Z,{sx:{width:"100%"},children:(0,s.jsx)(d.Z,{variant:"h4",gutterBottom:!0,children:"Destructuring"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"모든 크기의 튜플에 대해 let 바인딩이나 할당에서 해체될 수 있습니다."})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:'  address 0x42 {\n    module example {\n        \n    // 이 3개의 함수는 모두 동일합니다.\n    \n    \n     fun returns_uint(){}\n    \n     fun returns_2_values():(bool,bool){\n        (true,false)\n     } \n    \n     fun return_4_values(x:&u64):(&u64,u8,u128,vector<u8>){\n        (x,0,1,b"foobar")\n     }\n    \n     fun examples(cond:bool){\n        let ()= ();\n        let (x,y):(u8,u64)= (0,1);\n        let (a,b,c,d)= (@0x0,0,false,b"");\n    \n        ()= ();\n        (x,y)= if(cond)(1,2)else (3,4);\n        (a,b,c,d)= (@0x1,1,true,b"1");\n     }\n    \n     fun example_with_function_calls(){\n        let ()=  returns_unit();\n        let (x,y):(bool,bool)= returns_2_values();\n        let (a,b,c,d)= returns_4_values(&0);\n    \n        ()= returns_unit();\n        (x,y)= returns_2_values();\n        (a,b,c,d )= return_4_values(&1);\n     }\n    \n    \n    }\n    }\n'})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"자세한 내용은 변수 이동을 참조하십시오."})})}),(0,s.jsx)(r.Z,{xs:12,children:(0,s.jsx)(o.Z,{sx:{width:"100%"},children:(0,s.jsx)(d.Z,{variant:"h4",gutterBottom:!0,children:"Subtyping"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["참조와 함께 튜플은 Move에서",(0,s.jsx)("span",{style:{color:"purple"},children:"하위 유형"})," 이 있는 유일한 유형입니다. 튜플은 (",(0,s.jsx)("span",{style:{color:"purple"},children:" 공변량 방식으로"})," ) 참조가 있는 하위 유형이라는 의미에서만 하위 유형이 있습니다."]})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  module example ::test {\n    fun main(){\n     let x:&u64= &0;\n     let y:&mut u64= &mut 1;\n    \n     // (&u64, &mut u64)는 (&u64, &u64)의 하위 유형입니다.\n     //&mut u64는 &u64의 하위 유형이므로\n     let (a, b): (&u64, &u64) = (x, y);\n      \n \n     // (&mut u64, &mut u64)는 (&u64, &u64)의 하위 유형입니다.\n     // &mut u64는 &u64의 하위 유형이므로 \n     let (c, d): (&u64, &u64) = (y, y);\n     \n \n      // 오류! (&u64, &mut u64)는 (&mut u64, &mut u64)의 하위 유형이 아닙니다.\n     // &u64는 &mut u64의 하위 유형이 아니므로\n \n     let (e, f): (&mut u64, &mut u64) = (x, y);\n \n \n     }\n }\n"})}),(0,s.jsx)(r.Z,{xs:12,children:(0,s.jsx)(o.Z,{sx:{width:"100%"},children:(0,s.jsx)(d.Z,{variant:"h4",gutterBottom:!0,children:"소유권"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["위에서 언급했듯이 튜플 값은 런타임에 실제로",(0,s.jsx)("span",{style:{color:"purple"},children:" 존재하지 않습니다. "}),"그리고 현재 이 때문에 로컬 변수에 저장할 수 없습니다(",(0,s.jsx)("span",{style:{color:"purple"},children:"그러나 이 기능이 곧 제공될 가능성이 높습니다"}),"). 따라서 튜플을 복사하려면 먼저 지역 변수에 넣어야 하므로 튜플은 현재에만 이동할 수 있습니다."]})})})]})};function S(e){let{text:n}=e;return(0,s.jsx)("span",{style:{color:"purple"},children:n})}var O=()=>(0,s.jsxs)(r.Z,{container:!0,children:[(0,s.jsx)(r.Z,{xs:12,children:(0,s.jsx)(o.Z,{sx:{width:"100%"},children:(0,s.jsx)(d.Z,{variant:"h3",gutterBottom:!0,children:"지역변수에 변수 및 범위"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["Move의 지역 변수는 어휘(",(0,s.jsx)(S,{text:"정적으로"}),") 범위가 지정됩니다. 새 변수는",(0,s.jsx)(S,{text:"let"}),"키워드로 도입되며 동일한 이름을 가진 이전의 지역 변수를 가려버립니다. 지역 변수는 가변(",(0,s.jsx)(S,{text:"mutable"}),")이며, 직접적으로 업데이트하거나 가변 참조를 통해 업데이트할 수 있습니다."]})})}),(0,s.jsx)(r.Z,{xs:12,children:(0,s.jsx)(o.Z,{sx:{width:"100%"},children:(0,s.jsx)(d.Z,{variant:"h4",gutterBottom:!0,children:"let bindings"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["Move는 ",(0,s.jsx)(S,{text:"let"}),"을 사용하여 변수 이름과 값을 바인딩합니다."]})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  let x = 1;\n  let y = x + x:\n"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:[(0,s.jsx)(S,{text:"let"}),"은 지역변수에 값을 바인딩하지 않고도 사용할 수도 있습니다."]})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  let x;\n"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["그런 다음 ",(0,s.jsx)(S,{text:"지역변수"}),"에 나중에 값을 할당할 수 있습니다."]})})}),(0,s.jsx)(r.Z,{xs:12,md:12,children:(0,s.jsx)(Z,{code:" let x;\n  if (cond) {\n    x = 1\n  } else {\n    x = 0\n  }\n"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"이는 기본값을 제공할 수 없는 경우에 루프에서 값을 추출하려고 할 때 매우 유용할 수 있습니다."})})}),(0,s.jsx)(r.Z,{xs:12,md:12,children:(0,s.jsx)(Z,{code:"  let x;\n  let cond = true;\n  let i = 0;\n  loop {\n      (x, cond) = foo(i);\n      if (!cond) break;\n      i = i + 1;\n  }\n"})}),(0,s.jsx)(r.Z,{xs:12,children:(0,s.jsx)(o.Z,{sx:{width:"100%",marginTop:"30px"},children:(0,s.jsx)(d.Z,{variant:"h4",gutterBottom:!0,children:"변수는 사용하기 전에 할당되어야 합니다."})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"Move 언어의 유형 시스템은 지역 변수가 할당되기 전에 사용되는 것을 방지합니다."})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  let x;\n  x + x // 에러발생!\n\n"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  let x;\n  if (cond) x = 0;\n  x + x // 에러발생!"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  let x;\n  while (cond) x = 0;\n  x + x // 에러발생!\n"})}),(0,s.jsx)(r.Z,{xs:12,children:(0,s.jsx)(o.Z,{sx:{width:"100%",marginTop:"30px"},children:(0,s.jsx)(d.Z,{variant:"h4",gutterBottom:!0,children:"유효한 변수 이름"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["변수 이름에는 밑줄 ",(0,s.jsx)(S,{text:"_, 문자 a~z, 문자 A~Z, 숫자 0~9"}),"가 포함될 수 있습니다. 변수 이름은 ",(0,s.jsx)(S,{text:"밑줄 _"}),"또는 문자 ",(0,s.jsx)(S,{text:" a~z"}),"로 시작해야 합니다.대문자로 시작할 수는 없습니다."]})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  //모두 유효\n  let x = e;\n  let _x = e;\n  let _A = e;\n  let x0 = e;\n  let xA = e;\n  let foobar_123 = e;\n  \n  // 모두 유효하지 않음\n  let X = e; // 에러!\n  let Foo = e; // 에러!\n"})}),(0,s.jsx)(r.Z,{xs:12,children:(0,s.jsx)(o.Z,{sx:{width:"100%",marginTop:"30px"},children:(0,s.jsx)(d.Z,{variant:"h4",gutterBottom:!0,children:"유형 주석"})})}),(0,s.jsxs)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:[(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["지역 변수의 유형은 거의 항상 Move의 유형 시스템에 의해 추론될 수 있습니다. 그러나 Move는 ",(0,s.jsx)(S,{text:"가독성, 명확성"})," 또는",(0,s.jsx)(S,{text:"디버깅"}),"가능성을 위해 유용한 명시적인 유형 주석을 허용합니다. 유형 주석을 추가하는 구문은 다음과 같습니다:"]})}),(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"center"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:(0,s.jsx)(S,{text:"    *유형주석:변수, 매개변수, 반환 값 등에 대해 유형 정보를 명시적으로 표기하는 것을 의미"})})})]}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  let x: T = e; // T 유형의 변수 x는 표현식 e로 초기화됩니다.\n"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"명시적 유형 주석의 몇 가지 예:"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:'  address 0x42 {\n    module example {\n    \n        struct S { f: u64, g: u64 }\n    \n        fun annotated() {\n            let u: u8 = 0;\n            let b: vector<u8> = b"hello";\n            let a: address = @0x0;\n            let (x, y): (&u64, &mut u64) = (&0, &mut 1);\n            let S { f, g: f2 }: S = S { f: 0, g: 1 };\n        }\n    }\n}\n'})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"유형 주석은 항상 패턴의 오른쪽에 위치해야 합니다."})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  let (x: &u64, y: &mut u64) = (&0, &mut 1); // 오류! (x, y): ... =여야 합니다. "})}),(0,s.jsx)(r.Z,{xs:12,children:(0,s.jsx)(o.Z,{sx:{width:"100%",marginTop:"30px"},children:(0,s.jsx)(d.Z,{variant:"h4",gutterBottom:!0,children:"주석이 필요한 경우"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"일부 경우에는 유형 시스템이 유형을 추론할 수 없는 경우 로컬 유형 주석이 필요합니다. 이는 일반적으로 제네릭 유형의 유형 인수를 추론할 수 없는 경우에 발생합니다. 예를 들면:"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  let _v1 = vector::empty(); // 에러가 발생!\n  //        ^^^^^^^^^^^^^^^ 이 유형을 추론할 수 없습니다. 주석을 추가해 보세요.\n  let v2: vector<u64> = vector::empty(); //에러가 발생하지않음\n  "})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["더 드물게, 유형 시스템은 타입을 추론할 수 없는 비상귀 코드(",(0,s.jsx)(S,{text:"모든 다음 코드는 접근 불가능한 경우"}),")에 대한 타입을 결정할 수 없을 수도 있습니다.",(0,s.jsx)(S,{text:"return"})," 과 ",(0,s.jsx)(S,{text:"abort"}),"는 모두 식(",(0,s.jsx)(S,{text:"expression"}),")이므로 어떤 타입이든 가질 수 있습니다. ",(0,s.jsx)(S,{text:"break"}),"가 있는 경우 loop의 타입은 ()이지만, loop에서 ",(0,s.jsx)(S,{text:"break"}),"가 없는 경우 어떤 타입이든 가질 수 있습니다. 이러한 경우에는 타입 주석이 필요합니다. 예를 들어, 다음 코드:"]})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  let a: u8 = return ();\n  let b: bool = abort 0;\n  let c: signer = loop ();\n  \n  let x = return (); // 오류!\n  //  ^ 이 유형을 추론할 수 없습니다. 주석을 추가해 보세요\n  let y = abort 0; // 오류!\n  //  ^ 이 유형을 추론할 수 없습니다. 주석을 추가해 보세요\n  let z = loop (); // 오류!\n  //  ^ 이 유형을 추론할 수 없습니다. 주석을 추가해 보세요\n"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"이 코드에 유형 주석을 추가하면 사용되지 않는 지역 변수나 죽은 코드에 대한 다른 오류가 드러날 수 있지만, 이 예시는 이러한 문제를 이해하는 데 도움이 될 수 있습니다."})})}),(0,s.jsx)(r.Z,{xs:12,children:(0,s.jsx)(o.Z,{sx:{width:"100%",marginTop:"30px"},children:(0,s.jsx)(d.Z,{variant:"h4",gutterBottom:!0,children:"튜플을 사용한 여러개의 선언"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:[(0,s.jsx)(S,{text:"let"}),"키워드를 사용하면 튜플을 사용하여 한 번에 여러 개의 지역 변수를 동시에 선언할 수 있습니다. 괄호 내에 선언된 지역 변수들은 튜플에서 해당하는 값으로 ",(0,s.jsx)(S,{text:"초기화"}),"됩니다."]})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  let () = ();\n  let (x0, x1) = (0, 1);\n  let (y0, y1, y2) = (0, 1, 2);\n  let (z0, z1, z2, z3) = (0, 1, 2, 3);\n"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"표현식의 유형은 튜플 패턴의 개수와 정확히 일치해야 합니다. 예를 들어, 다음과 같은 코드를 살펴보겠습니다:"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  let (x, y) = (0, 1, 2); // 오류!\n  let (x, y, z, q) = (0, 1, 2); // 오류!\n"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["하나의 ",(0,s.jsx)(S,{text:"let"})," 문 내에서 동일한 이름으로 여러 개의 지역 변수를 선언할 수는 없습니다. 예를 들어, 다음과 같은 코드를 살펴보겠습니다:"]})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  let (x, x) = 0; // 오류!\n"})}),(0,s.jsx)(r.Z,{xs:12,children:(0,s.jsx)(o.Z,{sx:{width:"100%",marginTop:"30px"},children:(0,s.jsx)(d.Z,{variant:"h4",gutterBottom:!0,children:"구조체가 있는 여러개의 선언"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:[(0,s.jsx)(S,{text:"let"})," 키워드는 구조체를 분해하거나 구조체에 대한 매칭을 할 때 한 번에 여러 개의 로컬 변수를 동시에 선언할 수도 있습니다. 이 형태에서 ",(0,s.jsx)(S,{text:"let"}),"은 구조체의 필드 값으로 초기화된 지역 변수 집합을 생성합니다. 구문은 다음과 같습니다:"]})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  struct T { f1: u64, f2: u64 }"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  let T { f1: local1, f2: local2 } = T { f1: 1, f2: 2 };\n  // local1: u64\n  // local2: u64\n"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"다음은 더 복잡한 예입니다."})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  address 0x42 {\n    module example {\n        struct X { f: u64 }\n        struct Y { x1: X, x2: X }\n    \n        fun new_x(): X {\n            X { f: 1 }\n        }\n    \n        fun example() {\n            let Y { x1: X { f }, x2 } = Y { x1: new_x(), x2: new_x() };\n            assert!(f + x2.f == 2, 42);\n    \n            let Y { x1: X { f: f1 }, x2: X { f: f2 } } = Y { x1: new_x(), x2: new_x() };\n            assert!(f1 + f2 == 2, 42);\n        }\n    }\n    }\n"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:[(0,s.jsx)(S,{text:"구조체"}),"의 필드는 변수를 바인딩할 때와 변수의 이름으로 사용될 수 있는 두 가지 역할을 동시에 수행할 수 있습니다. 이는 때때로 ",(0,s.jsx)(S,{text:"punning"}),"이라고도 불립니다."]})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  let X { f } = e;"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"다음과 같습니다."})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  let X { f: f } = e;"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["튜플과 마찬가지로, 하나의 ",(0,s.jsx)(S,{text:"let"})," 문 내에서 동일한 이름으로 여러 개의 지역 변수를 선언할 수는 없습니다."]})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  let Y { x1: x, x2: x } = e; // 오류!"})}),(0,s.jsx)(r.Z,{xs:12,children:(0,s.jsx)(o.Z,{sx:{width:"100%",marginTop:"30px"},children:(0,s.jsx)(d.Z,{variant:"h4",gutterBottom:!0,children:"참조를 통한 구조분해(Destructuring against references)"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["구조체 예제에서 ",(0,s.jsx)(S,{text:"let"})," 문에서 바인딩된 값은 이동(",(0,s.jsx)(S,{text:"move"}),")되어 구조체 값이 파괴되고 그 필드들이 바인딩됩니다."]})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  struct T { f1: u64, f2: u64 }"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  let T { f1: local1, f2: local2 } = T { f1: 1, f2: 2 };\n  // local1: u64\n  // local2: u64"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["이 경우",(0,s.jsx)(S,{text:" T { f1: 1, f2: 2 }"}),"와 같은 구조체 값은",(0,s.jsx)(S,{text:" let"})," 이후에 더 이상 존재하지 않습니다. 대신 구조체 값을 이동시키지 않고 파괴하지 않고 각 필드를 빌림(",(0,s.jsx)(S,{text:"borrow"}),")하려면 다음과 같이 할 수 있습니다:"]})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  let t = T { f1: 1, f2: 2 };\n  let T { f1: local1, f2: local2 } = &t;\n  // local1: &u64\n  // local2: &u64"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["마찬가지로 가변 참조( ",(0,s.jsx)(S,{text:"mutabale references"}),")를 사용하여 비슷한 방식으로 수행할 수 있습니다:"]})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  let t = T { f1: 1, f2: 2 };\n  let T { f1: local1, f2: local2 } = &mut t;\n  // local1: &mut u64\n  // local2: &mut u64"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"이러한 동작은 중첩된 구조체에 대해서도 동작할 수 있습니다."})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  address 0x42 {\n    module example {\n        struct X { f: u64 }\n        struct Y { x1: X, x2: X }\n    \n        fun new_x(): X {\n            X { f: 1 }\n        }\n    \n        fun example() {\n            let y = Y { x1: new_x(), x2: new_x() };\n    \n            let Y { x1: X { f }, x2 } = &y;\n            assert!(*f + x2.f == 2, 42);\n    \n            let Y { x1: X { f: f1 }, x2: X { f: f2 } } = &mut y;\n            *f1 = *f1 + 1;\n            *f2 = *f2 + 1;\n            assert!(*f1 + *f2 == 4, 42);\n        }\n    }\n    }"})}),(0,s.jsx)(r.Z,{xs:12,children:(0,s.jsx)(o.Z,{sx:{width:"100%",marginTop:"30px"},children:(0,s.jsx)(d.Z,{variant:"h4",gutterBottom:!0,children:"값 무시 (Ignoring Values)"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:[(0,s.jsx)(S,{text:"let"})," 바인딩에서는 가끔씩 몇 가지 값을 무시하는 것이 유용합니다.",(0,s.jsx)(S,{text:"_"}),"로 시작하는 지역 변수는 무시되며 새로운 변수를 도입하지 않습니다"]})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  fun three(): (u64, u64, u64) {\n    (0, 1, 2)\n}"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  let (x1, _, z1) = three();\n  let (x2, _y, z2) = three();\n  assert!(x1 + z1 == x2 + z2, 42);"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["이는 때때로 필요할 수 있습니다. 사용되지 않는 지역 변수에 대해서는 컴파일러가 ",(0,s.jsx)(S,{text:"에러"}),"를 발생시킵니다."]})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  let (x1, y, z1) = three(); // 오류!\n  //       ^ 미사용 지역 변수 'y'"})}),(0,s.jsx)(r.Z,{xs:12,children:(0,s.jsx)(o.Z,{sx:{width:"100%",marginTop:"30px"},children:(0,s.jsx)(d.Z,{variant:"h4",gutterBottom:!0,children:"일반적인 let 문법(General let grammar)"})})}),(0,s.jsxs)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:[(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["모든 다양한 구조들을 let에서 결합할 수 있습니다! 그렇게 함으로써 let 문에 대한 ",(0,s.jsx)(S,{text:"일반적인 문법"}),"을 얻을 수 있습니다:"]})}),(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:" let-binding → let pattern-or-list type-annotationopt\n            initializeropt > pattern-or-list → pattern | ( pattern-list ) >\n            pattern-list → pattern ,opt | pattern , pattern-list >\n            type-annotation → : type initializer → = expression"})}),(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["바인딩을 도입하는 항목에 대한 일반적인 용어는 패턴입니다. 패턴은 데이터를 해체하고(",(0,s.jsx)(S,{text:"가능한 경우 재귀적으로"}),") 바인딩을 도입하는 데 사용됩니다. 패턴 문법은 다음과 같습니다:"]})}),(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"pattern → local-variable | struct-type { field-binding-list } > field-binding-list → field-binding ,opt | field-binding , field-binding-list > field-binding → field | field : pattern"})}),(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"이 문법을 적용한 몇 가지 구체적인 예시를 살펴보겠습니다."})})]}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"      let (x, y): (u64, u64) = (0, 1);\n  //       ^                           지역변수\n  //       ^                           패턴\n  //          ^                        지역변수\n  //          ^                        패턴\n  //          ^                        패턴목록\n  //       ^^^^                        패턴목록\n  //      ^^^^^^                       패턴 또는 목록\n  //            ^^^^^^^^^^^^           타입주석\n  //                         ^^^^^^^^  초기화자\n  //  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ let-바인딩\n  \n      let Foo { f, g: x } = Foo { f: 0, g: 1 };\n  //      ^^^                                    구조체타입\n  //            ^                                필드\n  //            ^                                필드-binding\n  //               ^                             필드\n  //                  ^                          지역변수\n  //                  ^                          패턴\n  //               ^^^^                          필드-binding\n  //            ^^^^^^^                          필드 바인딩 목록\n  //      ^^^^^^^^^^^^^^^                        패턴\n  //      ^^^^^^^^^^^^^^^                        패턴 또는 목록\n  //                      ^^^^^^^^^^^^^^^^^^^^   초기화자\n  //  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ let-바인딩"})}),(0,s.jsx)(r.Z,{xs:12,children:(0,s.jsx)(o.Z,{sx:{width:"100%",marginTop:"30px"},children:(0,s.jsx)(d.Z,{variant:"h3",gutterBottom:!0,children:"변경(Mutations)"})})}),(0,s.jsx)(r.Z,{xs:12,children:(0,s.jsx)(o.Z,{sx:{width:"100%"},children:(0,s.jsx)(d.Z,{variant:"h4",gutterBottom:!0,children:"할당(Assignments)"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["지역 변수가 도입된 후 (",(0,s.jsx)(S,{text:"let 또는 함수 매개변수로 도입됨"}),"), 할당을 통해 지역 변수를 수정할 수 있습니다."]})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  x = e"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:[(0,s.jsx)(S,{text:"let"})," 바인딩과 달리 할당은 표현식입니다. 일부 언어에서는 할당이 할당된 값 자체를 반환하지만, Move에서는 어떤 할당이든 항상",(0,s.jsx)(S,{text:"()"})," 타입을 갖습니다."]})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  (x = e: ())"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["실제로, 할당이 ",(0,s.jsx)(S,{text:"표현식"}),"이라는 것은 중괄호",(0,s.jsx)(S,{text:"({ ... })"})," 로 새로운 표현식 블록을 추가하지 않고도 사용할 수 있다는 의미입니다"]})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  let x = 0;\n  if (cond) x = 1 else x = 2;"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["할당은 ",(0,s.jsx)(S,{text:"let"})," 바인딩과 동일한 패턴 구문 체계를 사용합니다."]})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  address 0x42 {\n    module example {\n        struct X { f: u64 }\n    \n        fun new_x(): X {\n            X { f: 1 }\n        }\n    \n        //이 예제는 사용되지 않은 변수와 할당에 대한 경고를 발생시킬 것입니다.\n        fun example() {\n           let (x, _, z) = (0, 1, 3);\n           let (x, y, f, g);\n    \n           (X { f }, X { f: x }) = (new_x(), new_x());\n           assert!(f + x == 2, 42);\n    \n           (x, y, z, f, _, g) = (0, 0, 0, 0, 0, 0);\n        }\n    }\n    }"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:[(0,s.jsx)(S,{text:"지역변수"})," 는 하나의 타입만 가질 수 있으므로, 지역 변수의 타입은 할당 사이에 변경될 수 없습니다."]})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  let x;\n  x = 0;\n  x = false; // 오류!"})}),(0,s.jsx)(r.Z,{xs:12,children:(0,s.jsx)(o.Z,{sx:{width:"100%",marginTop:"30px"},children:(0,s.jsx)(d.Z,{variant:"h4",gutterBottom:!0,children:"참조를 통한 변경(Mutating through a reference)"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["할당을 통해 지역 변수를 직접 수정하는 것 외에도, 지역 변수는 가변 참조( ",(0,s.jsx)(S,{text:"&mut"})," )를 통해 수정할 수 있습니다."]})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  let x = 0;\n  let r = &mut x;\n  *r = 1;\n  assert!(x == 1, 42);"})}),(0,s.jsxs)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:[(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"이 기능은 특히 다음과 같은 경우에 유용합니다:"})}),(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"(1) 어떤 조건에 따라 다른 변수를 수정하고 싶은 경우"})})]}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  let x = 0;\n  let y = 1;\n  let r = if (cond) &mut x else &mut y;\n  *r = *r + 1;"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"(2) 다른 함수가 로컬 값을 수정하도록 하려는 경우"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  let x = 0;\n  modify_ref(&mut x);"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["이러한 수정 작업은 구조체(",(0,s.jsx)(S,{text:"struct"}),")와 벡터(",(0,s.jsx)(S,{text:"vector"}),")를 수정하는 방법입니다."]})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  let v = vector::empty();\n  vector::push_back(&mut v, 100);\n  assert!(*vector::borrow(&v, 0) == 100, 42);"})}),(0,s.jsx)(r.Z,{xs:12,children:(0,s.jsx)(o.Z,{sx:{width:"100%",marginTop:"30px"},children:(0,s.jsx)(d.Z,{variant:"h4",gutterBottom:!0,children:"범위(Scope)"})})}),(0,s.jsxs)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:[(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:[(0,s.jsx)(S,{text:"let"}),"으로 선언된 모든 지역 변수는 해당 범위 내에서 이후의 모든 표현식에서 사용할 수 있습니다. 범위는 표현식 블록",(0,s.jsx)(S,{text:" {...}"}),"으로 선언됩니다."]})}),(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"지역 변수는 선언된 범위 외부에서 사용할 수 없습니다."})})]}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  let x = 0;\n  {\n      let y = 1;\n  };\n  x + y // 오류!\n  //  ^ 선언되었지만 어떠한 값에도 바인딩되지 않은 'y'"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["하지만, 외부 범위의 지역 변수는 ",(0,s.jsx)(S,{text:"중첩"}),"된 범위에서 사용할 수 있습니다."]})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  {\n    let x = 0;\n    {\n        let y = x + 1; // 유효\n    }\n}"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"지역 변수는 접근 가능한 모든 범위에서 변경할 수 있습니다. 그 변경은 해당 지역 변수와 함께 유지되며, 변경을 수행한 범위와는 관계없이 유지됩니다."})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  let x = 0;\n  x = x + 1;\n  assert!(x == 1, 42);\n  {\n      x = x + 1;\n      assert!(x == 2, 42);\n  };\n  assert!(x == 2, 42);"})}),(0,s.jsx)(r.Z,{xs:12,children:(0,s.jsx)(o.Z,{sx:{width:"100%",marginTop:"30px"},children:(0,s.jsx)(d.Z,{variant:"h4",gutterBottom:!0,children:"표현식 블록(Expression Blocks)"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:[(0,s.jsx)(S,{text:"표현식 블록"}),"은 세미콜론 (",(0,s.jsx)(S,{text:";"}),")으로 구분된 일련의 문장들입니다. 표현식 블록의 결과값은 블록 내 마지막 표현식의 값입니다. 표현식 블록은 여러 개의 문장을 순차적으로 실행하고, 각 문장의 결과를 연속적으로 평가할 수 있는 유용한 도구입니다. 또한, 표현식 블록은 논리적인 코드 블록을 구성하고 제어 흐름을 조작하는 데 사용될 수 있습니다."]})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  { let x = 1; let y = 1; x + y }"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["이 예시에서 블록의 결과는 ",(0,s.jsx)(S,{text:"x + y"}),"입니다. 문장은 let 선언이나 표현식이 될 수 있습니다. 기억해 주세요, 할당문 ",(0,s.jsx)(S,{text:"(x = e)"}),"은 ",(0,s.jsx)(S,{text:"()"})," 타입의 표현식입니다."]})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  { let x; let y = 1; x = 1; x + y }"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["함수 호출은 ",(0,s.jsx)(S,{text:"()"})," 타입의 또 다른 일반적인 표현식입니다. 데이터를 수정하는 함수 호출은 주로 문장으로 사용됩니다."]})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  { let v = vector::empty(); vector::push_back(&mut v, 1); v }"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["이것은 ",(0,s.jsx)(S,{text:"()"}),"유형에만 국한되지 않습니다. 어떤 표현식이든 순서에서 문장으로 사용될 수 있습니다!"]})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:'  {\n    let x = 0;\n    x + 1; // 값이 버려졌습니다\n    x + 2; // 값이 버려졌습니다\n    b"hello"; // 값이 버려졌습니다\n}'})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["하지만! 만약 표현식에 리소스 (",(0,s.jsx)(S,{text:"drop기능이 없는 값"}),")가 포함되어 있다면 오류가 발생합니다. 이는 Move의 유형 시스템이 버림(",(0,s.jsx)(S,{text:"drop"}),")이 있는 모든 값이 drop 기능을 가지고 있다는 것을 보장하기 때문입니다. (",(0,s.jsx)(S,{text:"소유권은 전달되거나 선언된 모듈 내에서 명시적으로 파괴되어야 함을 보장합니다."}),")"]})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  {\n    let x = 0;\n    Coin { value: x }; // 오류!\n//  ^^^^^^^^^^^^^^^^^ 삭제(drop) 기능 없이 사용되지 않는 값\n    x\n}"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["만약 블록 안에 최종 표현식이 없는 경우 - 즉, 후행 세미콜론",(0,s.jsx)(S,{text:";"})," 이 있는 경우 - 암시적으로 단위",(0,s.jsx)(S,{text:"()"})," 값이 존재합니다. 마찬가지로, 표현식 블록이 비어있는 경우에도 암시적으로 단위 ",(0,s.jsx)(S,{text:"()"})," 값이 있습니다."]})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  // 두 번역은 동등합니다\n  { x = x + 1; 1 / x; }\n  { x = x + 1; 1 / x; () }"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  // 두 번역은 동등합니다\n  { }\n  { () }"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:[(0,s.jsx)(S,{text:"표현식블록"}),"은 그 자체로 표현식이며, 표현식이 사용되는 모든 곳에서 사용할 수 있습니다. (참고:",(0,s.jsx)(S,{text:"함수의 본문도 표현식 블록이지만, 함수 본문은 다른 표현식으로 대체할수 없습니다."}),")"]})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:'  let my_vector: vector<vector<u8>> = {\n    let v = vector::empty();\n    vector::push_back(&mut v, b"hello");\n    vector::push_back(&mut v, b"goodbye");\n    v\n};'})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"(이 예시에서는 타입 주석이 필요하지 않지만, 명확성을 위해 추가되었습니다.)"})})}),(0,s.jsx)(r.Z,{xs:12,children:(0,s.jsx)(o.Z,{sx:{width:"100%",marginTop:"30px"},children:(0,s.jsx)(d.Z,{variant:"h4",gutterBottom:!0,children:"섀도잉(shadowing)"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["만약 let을 사용하여 이미 ",(0,s.jsx)(S,{text:"scope"}),"에 존재하는 이름의 지역 변수를 도입한다면, 해당 이전 변수는 이후에 해당 스코프에서 더 이상 접근할 수 없습니다. 이를 ",(0,s.jsx)(S,{text:"shadowing"}),"이라고 합니다."]})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  let x = 0;\n  assert!(x == 0, 42);\n  \n  let x = 1; // x 가 가려졌습니다\n  assert!(x == 1, 42);\n  \n  "})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["지역 변수가 ",(0,s.jsx)(S,{text:"shadowing"}),"되면, 이전과 동일한 타입을 유지할 필요는 없습니다."]})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:'  let x = 0;\n  assert!(x == 0, 42);\n  \n  let x = b"hello"; // x 가 가려졌습니다\n  assert!(x == b"hello", 42);\n  \n  '})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["지역 변수가 ",(0,s.jsx)(S,{text:"shadowing"}),"된 후에도 해당 변수에 저장된 값은 여전히 존재하지만 더 이상 접근할 수 없습니다. 이는",(0,s.jsx)(S,{text:"drop"})," 기능이 없는 타입의 값들에 대해 유의해야 하는 중요한 사항입니다. 해당 값의 ",(0,s.jsx)(S,{text:"소유권"}),"은 함수가 끝나기 전에 전달되어야 합니다."]})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  address 0x42 {\n    module example {\n        struct Coin has store { value: u64 }\n\n        fun unused_resource(): Coin {\n            let x = Coin { value: 0 }; // 오류!\n//              ^ 이 지역 변수는 여전히 삭제 기능이 없는 값을 포함하고 있습니다.\n            x.value = 1;\n            let x = Coin { value: 10 };\n            x\n//          ^ 잘못된 반환\n        }\n    }\n}"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["지역 변수가 ",(0,s.jsx)(S,{text:"scope"})," 내에서",(0,s.jsx)(S,{text:"shadowing"}),"된 경우, 해당 ",(0,s.jsx)(S,{text:"shadowing"}),"은 그 ",(0,s.jsx)(S,{text:"scope"})," 내에서만 유지됩니다. 해당 scope가 종료되면 ",(0,s.jsx)(S,{text:"shadowing"}),"은 사라집니다."]})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  let x = 0;\n  {\n      let x = 1;\n      assert!(x == 1, 42);\n  };\n  assert!(x == 0, 42);"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["기억해 주세요, 지역 변수는 ",(0,s.jsx)(S,{text:"shadowing"}),"될 때 타입이 변경될 수 있습니다."]})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:'  let x = 0;\n  {\n      let x = b"hello";\n      assert!(x = b"hello", 42);\n  };\n  assert!(x == 0, 42);'})}),(0,s.jsx)(r.Z,{xs:12,children:(0,s.jsx)(o.Z,{sx:{width:"100%",marginTop:"30px"},children:(0,s.jsx)(d.Z,{variant:"h4",gutterBottom:!0,children:"이동 및 복사"})})}),(0,s.jsxs)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:[(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["Move 언어에서는 모든 지역 변수를 ",(0,s.jsx)(S,{text:"move"})," 또는",(0,s.jsx)(S,{text:"copy"}),"의 두 가지 방법으로 사용할 수 있습니다. 둘 중 하나가 명시되지 않은 경우, Move 컴파일러는 복사(",(0,s.jsx)(S,{text:"copy"}),") 또는 이동( ",(0,s.jsx)(S,{text:"move"}),")을 사용해야 하는지를 추론할 수 있습니다. 이는 위의 모든 예제에서 컴파일러가 ",(0,s.jsx)(S,{text:"move"})," 또는 ",(0,s.jsx)(S,{text:"copy"}),"를 삽입한다는 것을 의미합니다. 지역변수 변수는 ",(0,s.jsx)(S,{text:"move"}),"또는",(0,s.jsx)(S,{text:"copy"})," 없이 사용할 수 없습니다."]})}),(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:[(0,s.jsx)(S,{text:"copy"}),"는 다른 프로그래밍 언어에서 익숙할 것입니다. 변수 내부의 값을 새로 복사하여 해당 표현식에서 사용합니다.",(0,s.jsx)(S,{text:"copy"}),"를 사용하면 로컬 변수를 한 번 이상 사용할 수 있습니다."]})})]}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  let x = 0;\n  let y = copy x + 1;\n  let z = copy x + 2;"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["copy와 달리, ",(0,s.jsx)(S,{text:"move"}),"는 데이터를 복사하지 않고 지역 변수에서 값을 가져옵니다. Move가 발생한 후에는 해당 지역 변수를 사용할 수 없습니다. move는 지역 변수에서 값을 가져오는 동시에",(0,s.jsx)(S,{text:"변수를 비웁니다."})]})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  let x = 1;\n  let y = move x + 1;\n  //      ------ \b지역 변수가 여기로 이동되었습니다\n  let z = move x + 2; // 오류!\n  //      ^^^^^^\"지역 변수 'x'의 잘못된 사용\"\n  y + z"})}),(0,s.jsx)(r.Z,{xs:12,children:(0,s.jsx)(o.Z,{sx:{width:"100%",marginTop:"30px"},children:(0,s.jsx)(d.Z,{variant:"h4",gutterBottom:!0,children:"안전"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["Move의 타입 시스템은 값을 ",(0,s.jsx)(S,{text:"move"}),"한 후에 사용되는 것을 방지합니다. 이는 let 선언에서 설명한 것과 동일한 안전성 검사입니다. 이는 로컬 변수가 값을 할당하기 전에 사용되는 것을 방지하는 기능입니다."]})})}),(0,s.jsx)(r.Z,{xs:12,children:(0,s.jsx)(o.Z,{sx:{width:"100%",marginTop:"30px"},children:(0,s.jsx)(d.Z,{variant:"h4",gutterBottom:!0,children:"추론"})})}),(0,s.jsxs)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:[(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["앞서 언급한대로, Move 컴파일러는 명시적으로 복사(",(0,s.jsx)(S,{text:"copy"}),") 또는 이동( ",(0,s.jsx)(S,{text:"move"}),")가 지정되지 않은 경우에도 자동으로 ",(0,s.jsx)(S,{text:"복사"})," 또는",(0,s.jsx)(S,{text:"이동"}),"을 추론합니다. 이를 위한 알고리즘은 매우 간단합니다."]})}),(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["﹥복사( ",(0,s.jsx)(S,{text:"copy"}),") 능력을 갖는 스칼라 값은 복사(",(0,s.jsx)(S,{text:"copy"}),")로 처리됩니다."]})}),(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["    ⇥참조자 ( ",(0,s.jsx)(S,{text:"가변 &mut 및 불변 &"}),") 는 복사( ",(0,s.jsx)(S,{text:"copy"}),")로 처리됩니다."]})}),(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"﹥ 다만, 예측 가능한 대여 검사 오류를 위해 특수한 상황에서 이동(move)으로 처리될 수 있습니다."})}),(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["﹥다른 모든 값은 이동( ",(0,s.jsx)(S,{text:"move"}),")으로 처리됩니다."]})}),(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["    ⇥이는 다른 값들이 복사( ",(0,s.jsx)(S,{text:"copy"}),") 능력을 가질지라도, 프로그래머가 명시적으로 복사를 해주어야 한다는 것을 의미합니다."]})}),(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"    ⇥이는 실수로 큰 데이터 구조체를 복사하는 것을 방지하기 위한 것입니다."})})]}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:'  let s = b"hello";\n  let foo = Foo { f: 0 };\n  let coin = Coin { value: 0 };\n  \n  let s2 = s; // move\n  let foo2 = foo; // move\n  let coin2 = coin; // move\n  \n  let x = 0;\n  let b = false;\n  let addr = @0x42;\n  let x_ref = &x;\n  let coin_ref = &mut coin2;\n  \n  let x2 = x; // copy\n  let b2 = b; // copy\n  let addr2 = @0x42; // copy\n  let x_ref2 = x_ref; // copy\n  let coin_ref2 = coin_ref; // copy'})})]}),X=()=>{let e=(0,A.ZP)(b.Z)(e=>{let{theme:n}=e;return{["&.".concat(f.Z.head)]:{backgroundColor:" #171B1C",color:n.palette.common.white},["&.".concat(f.Z.body)]:{fontSize:12}}}),n=(0,A.ZP)(_.Z)(e=>{let{theme:n}=e;return{"&:nth-of-type(odd)":{backgroundColor:n.palette.common.white,color:n.palette.common.white},"&:last-child td, &:last-child th":{border:0}}});return(0,s.jsxs)(r.Z,{container:!0,children:[(0,s.jsx)(r.Z,{xs:12,children:(0,s.jsx)(o.Z,{sx:{width:"100%"},children:(0,s.jsx)(d.Z,{variant:"h3",gutterBottom:!0,children:"평등"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"Move는 ==와 !=라는 두 가지 동등성 연산을 지원합니다."})})}),(0,s.jsx)(r.Z,{xs:0,md:2}),(0,s.jsx)(r.Z,{xs:12,md:8,sx:{marginTop:"30px"},children:(0,s.jsx)(T.Z,{component:B.Z,children:(0,s.jsxs)(v.Z,{sx:{width:"100%"},"aria-label":"customized table",children:[(0,s.jsx)(w.Z,{children:(0,s.jsxs)(_.Z,{children:[(0,s.jsx)(e,{children:"통사론"}),(0,s.jsx)(e,{children:"타입"}),(0,s.jsx)(e,{children:"설명"})]})}),(0,s.jsx)(y.Z,{component:"div",children:[{통사론:"==",작업:"qual",설명:"만약 두 피연산자가 동일한 값을 가지고 있다면 true를 반환하고, 그렇지 않으면 false를 반환합니다."},{통사론:"!=",작업:"not qual",설명:"만약 두 피연산자가 서로 다른 값을 가지고 있다면 true를 반환하고, 그렇지 않으면 false를 반환합니다."}].map(t=>(0,s.jsxs)(n,{children:[(0,s.jsx)(e,{children:null==t?void 0:t.통사론}),(0,s.jsx)(e,{children:null==t?void 0:t.작업}),(0,s.jsx)(e,{children:null==t?void 0:t.설명})]}))})]})})}),(0,s.jsx)(r.Z,{xs:0,md:2}),(0,s.jsx)(r.Z,{xs:12,children:(0,s.jsx)(o.Z,{sx:{width:"100%",marginTop:"30px"},children:(0,s.jsx)(d.Z,{variant:"h4",gutterBottom:!0,children:"타이핑"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"같음(==) 및 같지 않음(!=) 연산은 두 피연산자가 동일한 유형이어야만 작동합니다."})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:'  0 == 0; //true\n  1u128 == 2u128; //false\n  b"hello" != x"00"; //true\n'})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"사용자 정의된 유형에 대해서도 같음(==)과 같지 않음(!=) 연산이 작동합니다!"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:'  address 0x42 {\n    module example {\n        struct S has copy,drop {\n            f:u64,\n            s:vector<u8>\n        }\n        fun alwats_true():bool {\n            let s= S {\n                f:0,\n                s:b""\n            };\n            //괄호는 필요하지 않지만 이 예시에서 명확성을 위해 추가되었습니다.\n            (copy s) == s\n        }\n        fun alwats_false():bool {\n            let s = S {\n                f:0,\n                s:b""\n            };\n            //괄호는 필요하지 않지만 이 예시에서 명확성을 위해 추가되었습니다.\n            (copy s) != s\n        }\n    }\n}\n'})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"피연산자가 서로 다른 유형을 가지고 있다면, 유형 검사 오류가 발생합니다."})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  1u8 == 1u128; // 오류!\n  //     ^^^^^ 'u8' 유형의 인수가 필요합니다.\n  b\"\" != 0; // 오류!\n  //     ^ 'vector<u8>' 유형의 인수가 필요합니다.\n"})}),(0,s.jsx)(r.Z,{xs:12,children:(0,s.jsx)(o.Z,{sx:{width:"100%",marginTop:"30px"},children:(0,s.jsx)(d.Z,{variant:"h4",gutterBottom:!0,children:"참조를 사용한 유형 지정"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"참조를 비교할 때 참조의 유형(불변 또는 가변)은 중요하지 않습니다. 즉, 동일한 기저 유형의 불변한 & 참조와 가변한 &mut 참조를 비교할 수 있습니다."})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  module example::test {\n    fun main(){\n        let i = &0;\n        let n = &mut 1;\n        i == m;//false\n        m == i;//false\n        m == m;//true\n        i == i;//true\n    }\n}\n"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"위 내용은 필요한 경우 각 가변 참조에 명시적인 freeze를 적용하는 것과 동일합니다."})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  module example::test {\n    fun main(){\n        let i = &0;\n        let m = &mut 1;\n\n        i == freeze(m); //false\n        freeze(m) == i;//false\n        m == m;//true\n        i == i;//true\n    }\n}\n"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"다시 말씀드리면, 기저 유형은 동일한 유형이어야 합니다."})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  module example::test {\n    fun main(){\n        let i = &0;\n        let s = &b\"\";\n\n        i == s;//오류\n        //   ^ '&u64' 유형의 인수가 필요합니다.\n    }\n}\n"})}),(0,s.jsx)(r.Z,{xs:12,children:(0,s.jsx)(o.Z,{sx:{width:"100%",marginTop:"30px"},children:(0,s.jsx)(d.Z,{variant:"h4",gutterBottom:!0,children:"제약사항(제한 사항)"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsxs)(d.Z,{variant:"body1",gutterBottom:!0,children:["== 및 != 모두 비교 시 값을 소비합니다. 결과적으로, 유형 시스템은 해당 유형이 drop을 가져야 한다는 사실을 강제합니다. drop 능력이 없으면 함수가 종료될 때 소유권이 전달되어야 하며, 이러한 값은 선언된 모듈 내에서 명시적으로만 파괴될 수 있습니다. 이러한 값들이 직접적으로 == 또는 !=와 함께 사용된다면 값이 파괴되어 drop 능력의 안전성 보장이 깨질 것입니다!"," "]})})})," ",(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  address 0x42 {\n    module example {\n        struct Coin has store {\n            value: u64\n        }\n        fun invalid(c1:Coin,c2:Coin){\n            c1 == c2 //오류발생!!\n    //      ^^    ^^ 이러한 리소스들이 파괴될 것입니다!\n        }\n    }\n}\n"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"그러나, 프로그래머는 값을 직접 비교하는 대신 값이 먼저 대여될 수 있으며, 참조 유형은 drop 기능을 가지고 있습니다. 예를 들어, 다음과 같습니다:"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  address 0x42 {\n    module example {\n        struct Coin as store {\n            value:u64\n        }\n        fun swap_if_equal(c1:Coin,c2:Coin):(Coin,Coin) {\n            let are_equal = &c1 == &c2 ; //유효\n            if (are_equal) (c2,c1) else (c1,c2)\n        }\n    }\n}\n"})}),(0,s.jsx)(r.Z,{xs:12,children:(0,s.jsx)(o.Z,{sx:{width:"100%",marginTop:"30px"},children:(0,s.jsx)(d.Z,{variant:"h4",gutterBottom:!0,children:"추가적인 복사는 피해야 합니다"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"프로그래머는 drop이 있는 모든 유형의 값을 비교할 수 있지만, 복사 비용이 큰 경우 참조를 사용하여 비교하는 것이 좋습니다."})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  module example::test {\n    fun main(){\n        let v1: vector<u8>= function_that_returns_vector();\n        let v2: vector<u8>= function_that_returns_vector();\n        assert!(copy v1 == copy v2, 42);\n         //     ^^^^       ^^^^\n        use_two_vectors(v1,v2);\n\n        let s1: Foo = function_that_returns_large_struct();\n        let s2: Foo = function_that_returns_large_struct();\n        assert!(copy s1 == copy s2, 42);\n         //     ^^^^       ^^^^\n        use_two_foos(s1, s2);\n    }\n}\n"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"이 코드는 완벽하게 허용됩니다 (Foo가 drop을 가진다고 가정할 때), 그러나 효율적이지는 않습니다. 강조된 복사본은 제거되고 대신 참조를 사용할 수 있습니다."})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  module example::test {\n    fun main(){\n        let v1: vector<u8> = function_that_returns_vector();\n        let v12 vector<u8> = function_that_returns_vector();\n        assert!(&v1 == &v2, 42);\n        //     ^      ^\n        use_two_vectors(v1, v2);\n\n\n        let s1:Foo= function_that_returns_large_struct();\n        let s2:Foo= function_that_returns_large_struct();\n        assert!(&s1 == &s2, 42);\n        //     ^      ^\n        use_two_foos(s1, s2);\n    }\n}\n"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"== 연산 자체의 효율성은 동일하지만, 복사본은 제거되어 프로그램이 더 효율적이게 됩니다."})})})]})},N=()=>(0,s.jsxs)(r.Z,{container:!0,children:[(0,s.jsx)(r.Z,{xs:12,children:(0,s.jsx)(o.Z,{sx:{width:"100%"},children:(0,s.jsx)(d.Z,{variant:"h3",gutterBottom:!0,children:"Abort와 Assert"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"return과 abort는 실행을 종료하는 두 개의 제어 흐름 구조입니다. return은 현재 함수의 실행을 종료하고, abort는 전체 트랜잭션을 종료합니다."})})}),(0,s.jsx)(r.Z,{xs:12,children:(0,s.jsx)(o.Z,{sx:{width:"100%"},children:(0,s.jsx)(d.Z,{variant:"h4",gutterBottom:!0,children:"Abort"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"abort는 하나의 인수를 받는 표현식으로, u64 타입의 중단 코드를 의미합니다. 예를 들어:"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  module example::test {\n    fun main(){\n        abort 42\n    }\n}\n"})}),(0,s.jsxs)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:[(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:'abort 표현식은 현재 함수의 실행을 중단하고, 현재 트랜잭션에 의해 전역 상태에 가해진 모든 변경 사항을 되돌립니다. abort를 "catch"하거나 다른 방식으로 처리하는 메커니즘은 존재하지 않습니다.'})}),(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:'다행히도 Move에서는 트랜잭션은 "모두 또는 아무것도"의 원칙을 따르며, 트랜잭션이 성공한 경우에만 전역 스토리지에 대한 모든 변경 사항이 한 번에 이루어집니다. 이러한 트랜잭션의 변경 사항 커밋 기능으로 인해, 중단된 후에는 변경 사항을 되돌리는 작업에 대해 걱정할 필요가 없습니다. 이 접근 방식은 유연성이 부족하지만 매우 간단하고 예측 가능합니다.'})}),(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"abort는 return과 유사하게, 어떤 조건을 충족시킬 수 없을 때 제어 흐름을 종료하는 데 유용합니다."})}),(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"이 예제에서는 함수가 벡터에서 두 개의 항목을 꺼내오지만, 벡터에 두 개의 항목이 없는 경우에는 중간에 실행을 중단할 것입니다."})})]}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  module example::test {\n    use std::vector;\n    fun pop_twice<T>(v:&mut vector<T>):(T,T){\n        if (vector::length(v)<2)abort 42;\n\n        (vector::pop_back(v),vector::pop_back(v))\n    }\n}\n"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"이는 제어 흐름 구조 내부에서 더욱 유용합니다. 예를 들어, 이 함수는 벡터 내의 모든 숫자가 지정된 한계 값보다 작은지 확인하고, 그렇지 않은 경우 중단합니다."})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  module example::test {\n    use std::vector;\n    fun check_vec(v:&vector<u64>,bound:u64){\n        let i = 0;\n        let n = vector::length(v);\n        while (i < n){\n            let cur = *vector::borrow(v,i);\n            if (cur>bound)abort 42;\n            i = i+1;\n        }\n    }\n}\n"})}),(0,s.jsx)(r.Z,{xs:12,children:(0,s.jsx)(o.Z,{sx:{width:"100%"},children:(0,s.jsx)(d.Z,{variant:"h4",gutterBottom:!0,children:"Assert"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"assert는 Move 컴파일러에서 제공하는 내장 매크로와 유사한 연산입니다. assert는 두 개의 인자를 받습니다. 첫 번째는 bool 타입의 조건(condition)이고, 두 번째는 u64 타입의 코드(code)입니다."})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  module exmaple::test {\n    fun main(){\n      assert!(condition: bool, code: u64)\n    }\n}\n"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"assert는 매크로로 구현되어 있기 때문에 호출 시에는 느낌표(!)를 사용해야 합니다. 이는 assert의 인자가 표현식으로 호출되는 것을 나타내기 위한 것입니다. 다시 말해, assert는 일반적인 함수가 아니며 바이트코드 수준에서 존재하지 않습니다. 컴파일러 내부에서 번역되어 처리됩니다."})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  module example::test {\n    fun main(){\n        if (continue) () else abort code\n    }\n}\n"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"assert는 abort 단독으로 사용되는 것보다 더 일반적으로 사용됩니다. 위의 abort 예제들은 assert를 사용하여 다시 작성할 수 있습니다."})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  module example::test {\n    use std::vector;\n    fun pop_twice<T>(v:&mut vector<T>):(T,T){\n        assert!(vector::length(v) >= 2,42);//이제 'assert'를 사용합니다.\n\n        (vector::pop_back(v),vector::pop_back(v))                \n    }\n}\n"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"and"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  module example::test {\n    use std::vector;\n    fun check_vec(v:&vector<u64>,bound:u64){\n        let i = 0;\n        let n = vector::length(v);\n        while (i < n){\n            let cur = *vector::borrow(v,i);\n            assert!(cur <= bound ,42);//\n            i = i + 1;\n        }\n    }\n}\n"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"주의할 점은 해당 작업이 이렇게 if-else로 대체되기 때문에 코드의 인자가 항상 평가되지는 않는다는 것입니다. 예를 들어:"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"   assert!(true,1/0)"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"산술 오류가 발생하지 않으며, 다음과 동등합니다:"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"if (true) () else (1/0)"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"따라서 산술식은 평가되지 않습니다!"})})}),(0,s.jsx)(r.Z,{xs:12,children:(0,s.jsx)(o.Z,{sx:{width:"100%"},children:(0,s.jsx)(d.Z,{variant:"h4",gutterBottom:!0,children:"Move VM에서의 중단 코드"})})}),(0,s.jsxs)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:[(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"abort를 사용할 때는 u64 코드가 VM에서 어떻게 사용되는지 이해하는 것이 중요합니다."})}),(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"일반적으로 성공적인 실행 후에 Move VM은 전역 스토리지에 대한 변경 사항(리소스 추가/제거, 기존 리소스 업데이트 등)에 대한 변경 세트를 생성합니다."})}),(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"중단(abort)이 발생하는 경우 VM은 오류를 나타내며, 해당 오류에는 두 가지 정보가 포함됩니다:"})})]}),(0,s.jsxs)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:[(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"    ⇥ 발생한 중단(abort)을 생성한 모듈(주소와 이름)"})}),(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"    ⇥ 중단 코드"})})]}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"   address 0x42 {\n    module example {\n        public fun aborts(){\n            abort 42\n        }\n    }\n}\n\nscript {\n    fun always_abort() {\n        0x2::example::aborts()\n    }\n}\n"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"만약 위에서 언급한 스크립트인 always_aborts와 같은 트랜잭션이 0x2::example::aborts를 호출하면, VM은 모듈 0x2::example과 코드 42를 나타내는 오류를 생성합니다. 이는 모듈 내에서 여러 중단(abort)을 그룹화하는 데 유용할 수 있습니다. 이 예시에서는 모듈에 두 개의 별도 오류 코드가 있으며, 여러 함수에서 사용됩니다."})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"   address 0x42 {\n    module example {\n        use std::vector;\n\n        const EMPTY_VECTOR : u64 = 0;\n        const INDEX_OUT_OF_BOUNDES:u64  = 1;\n\n        // move i to j, move j to k, move k to i\n        public fun rotate_three<T>(v:&mut vector<T>,i:u64,j:u64,k:u64){\n            let n = vector::length(v);\n            assert!(n>0,EMPTY_VECTOR);\n            assert!(i<n,INDEX_OUT_OF_BOUNDES);\n            assert!(j<n,INDEX_OUT_OF_BOUNDES);\n            assert!(k<n,INDEX_OUT_OF_BOUNDES);\n\n            vector::swap(v, i, k);\n            vector::swap(v, j, k);\n        }\n\n        public fun remove_twice<T>(v:&mut vector<T>,i:u64,j:u74):(T,T){\n           let n = vector::length(v); \n           assert!(n>0,EMPTY_VECTOR);\n           assert!(i<n,INDEX_OUT_OF_BOUNDES);\n           assert!(j<n,INDEX_OUT_OF_BOUNDES);\n           assert!(i>j,INDEX_OUT_OF_BOUNDES);\n           \n           (vector::remove<T>(v,i),vector::remove<T>(v,j))\n        }\n    } \n}\n"})}),(0,s.jsx)(r.Z,{xs:12,children:(0,s.jsx)(o.Z,{sx:{width:"100%"},children:(0,s.jsx)(d.Z,{variant:"h4",gutterBottom:!0,children:"중단(abort)의 종류"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"abort 식은 어떤 타입이든 가질 수 있습니다! 이는 두 개의 구조 모두 일반적인 제어 흐름을 탈출하기 때문에 해당 타입의 값을 평가할 필요가 없기 때문입니다. 다음은 유용하지는 않지만 타입 체크를 통과할 것입니다."})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"   module example::test {\n    fun main(){\n        let y:address = abort 0;\n    }\n}\n"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"이 동작은 가지 분기 지시문에서 일부 분기에서 값이 생성되지만 다른 분기에서는 생성되지 않는 상황에서 유용할 수 있습니다. 예를 들어:"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"   module example::test {\n    fun main(){\n        let b = \n             if(x==0)false\n             else if (x==1)true\n             else abort 42;\n               // ^^^^^^^^ abort 42의 타입은 bool입니다.\n    }\n}\n"})})]}),P=()=>(0,s.jsxs)(r.Z,{container:!0,children:[(0,s.jsx)(r.Z,{xs:12,children:(0,s.jsx)(o.Z,{sx:{width:"100%"},children:(0,s.jsx)(d.Z,{variant:"h3",gutterBottom:!0,children:"조건부"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"if 문은 특정 조건이 참일 때에만 코드를 실행해야 함을 명시하는 표현입니다. 예를 들어:"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  module example::test {\n    fun main(){\n        if (x>5) x= x-5\n    }\n}\n"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"조건은 bool 형식의 표현식이어야 합니다. if 표현식은 선택적으로 else 절을 포함할 수 있습니다. else 절은 조건이 거짓일 때 평가할 다른 표현식을 지정합니다. else 절은 if 표현식의 조건이 거짓인 경우 실행될 대체 코드 경로를 제공합니다. 다음은 예시입니다:"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  module example::test {\n    fun main(){\n        if (x <= 5 ) y = y+1 else y = 10\n    }\n}\n"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:'if 표현식에서는 "참" 분기 또는 "거짓" 분기 중 하나가 평가되지만, 둘 다 평가되지는 않습니다. 각 분기는 단일 표현식 또는 표현식 블록일 수 있습니다. 조건부 표현식은 결과를 가질 수 있도록 값으로 평가될 수 있습니다. 따라서 if 표현식은 결과를 가집니다. 예를 들어:'})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  module example::test {\n    fun main(){\n       let z = if (x < 100) x else 100;\n    }\n}\n"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"참(True)과 거짓(False) 분기의 표현식은 호환 가능한 타입을 가져야 합니다. 예를 들어:"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  module example::test {\n    fun main(){\n        // x와 y는 u64 정수여야 합니다.\n        let maximum:u64 = if(x>y) x else y;\n        // 오류! 분기가 다른 타입입니다.\n        let z= if (maximum <10 )10u8 else 100u64;\n        // 오류! 분기가 다른 타입입니다. 기본적으로 거짓 분기는 u64가 아닌 ()입니다.\n        if (maximum >= 10) maximum;\n    }\n}\n"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"만약 else 절이 지정되지 않은 경우, 거짓 분기는 기본적으로 unit 값으로 설정됩니다. 다음은 동등한 표현입니다:"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  module example::test {\n    fun main(){\n        if (condition) true_branch\n        if (condition) true_branch else  ()\n    }\n}\n"})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"일반적으로, 표현식 블록과 함께 if 표현식이 사용됩니다."})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"0px"},children:(0,s.jsx)(Z,{code:"  module example::test {\n    fun main(){\n        let maximum = if(x>y) x else y;\n        if (maximum <10){\n            x= x+10;\n            y= y+10;\n        }else if(x>-10 && y>=10){\n            x= x-10;\n            y= y-10;\n        }\n    }\n}\n"})}),(0,s.jsx)(r.Z,{xs:12,children:(0,s.jsx)(o.Z,{sx:{width:"100%"},children:(0,s.jsx)(d.Z,{variant:"h3",gutterBottom:!0,children:"조건문의 문법"})})}),(0,s.jsx)(r.Z,{xs:12,md:12,sx:{marginTop:"30px"},children:(0,s.jsx)(o.Z,{sx:{width:"100%",textAlign:"left"},children:(0,s.jsx)(d.Z,{variant:"body1",gutterBottom:!0,children:"if-expression → if ( expression ) expression else-clauseopt else-clause → else expression"})})})]});function q(){let[e,n]=(0,x.useState)(!1),[t,c]=(0,x.useState)(0);function j(e){let{children:n,value:t,index:x,...r}=e;return(0,s.jsx)("div",{style:{textAlign:"center",width:"80%"},role:"tabpanel",hidden:t!==x,id:"vertical-tabpanel-".concat(x),"aria-labelledby":"vertical-tab-".concat(x),...r,children:t===x&&(0,s.jsx)(o.Z,{sx:{p:10,color:"white"},children:(0,s.jsx)(d.Z,{children:n})})})}function p(e){return{id:"vertical-tab-".concat(e),"aria-controls":"vertical-tabpanel-".concat(e)}}return(0,x.useEffect)(()=>{n(!0)},[]),j.propTypes={children:a().node,index:a().number.isRequired,value:a().number.isRequired},e&&(0,s.jsxs)(r.Z,{container:!0,sx:{marginTop:"84px"},children:[(0,s.jsxs)(r.Z,{xs:12,sx:{backgroundColor:" #171B1C",textAlign:"center",fontSize:"300%",color:"white"},children:[(0,s.jsx)("img",{src:"/img/move.webp",style:{width:"50px"}}),(0,s.jsx)("div",{children:"MOVE BOOK"})]}),(0,s.jsx)(r.Z,{xs:12,children:(0,s.jsxs)(o.Z,{sx:{flexGrow:1,bgcolor:" #171B1C",display:"flex",minHeight:"600px",textAlign:"center"},children:[(0,s.jsxs)(l.Z,{orientation:"vertical",variant:"scrollable",value:t,onChange:(e,n)=>{c(n)},"aria-label":"Vertical tabs example",sx:{borderRight:1,borderColor:" #171B1C",width:"16%",color:"white"},children:[(0,s.jsx)(i.Z,{sx:{color:"white"},label:"0️_소개 및 설치",...p(0)}),(0,s.jsx)(i.Z,{sx:{color:"white"},label:"1️_모듈 및 스크립트",...p(1)}),(0,s.jsx)(i.Z,{sx:{color:"white"},label:"2️_정수",...p(2)}),(0,s.jsx)(i.Z,{sx:{color:"white"},label:"3️_부울",...p(3)}),(0,s.jsx)(i.Z,{sx:{color:"white"},label:"4️_주소",...p(4)}),(0,s.jsx)(i.Z,{sx:{color:"white"},label:"5️_벡터",...p(5)}),(0,s.jsx)(i.Z,{sx:{color:"white"},label:"6_서명자",...p(6)}),(0,s.jsx)(i.Z,{sx:{color:"white"},label:"7️_참조",...p(7)}),(0,s.jsx)(i.Z,{sx:{color:"white"},label:"8️_튜플 및 단위",...p(8)}),(0,s.jsx)(i.Z,{sx:{color:"white"},label:"9️_지역 변수 및 범위",...p(9)}),(0,s.jsx)(i.Z,{sx:{color:"white"},label:"10_평등",...p(10)}),(0,s.jsx)(i.Z,{sx:{color:"white"},label:"1️1_중단 및 어성셜",...p(11)}),(0,s.jsx)(i.Z,{sx:{color:"white"},label:"12_조건부",...p(12)}),(0,s.jsx)(i.Z,{sx:{color:"white"},label:"13_반복문",...p(13)}),(0,s.jsx)(i.Z,{sx:{color:"white"},label:"14_기능",...p(14)}),(0,s.jsx)(i.Z,{sx:{color:"white"},label:"15_구조체 리소스",...p(15)}),(0,s.jsx)(i.Z,{sx:{color:"white"},label:"16_상수",...p(16)}),(0,s.jsx)(i.Z,{sx:{color:"white"},label:"17️_제네릭",...p(17)}),(0,s.jsx)(i.Z,{sx:{color:"white"},label:"18️_능력",...p(18)}),(0,s.jsx)(i.Z,{sx:{color:"white"},label:"19️_용도 및 별칭",...p(19)}),(0,s.jsx)(i.Z,{sx:{color:"white"},label:"20️_친구",...p(20)}),(0,s.jsx)(i.Z,{sx:{color:"white"},label:"21_패키지",...p(21)}),(0,s.jsx)(i.Z,{sx:{color:"white"},label:"22_패키지 업그레이드",...p(22)}),(0,s.jsx)(i.Z,{sx:{color:"white"},label:"23️_단위 및 테스트",...p(23)}),(0,s.jsx)(i.Z,{sx:{color:"white"},label:"24️_글로벌 스토리지 구조",...p(24)}),(0,s.jsx)(i.Z,{sx:{color:"white"},label:"25_글로벌 스토리지 사업자",...p(25)}),(0,s.jsx)(i.Z,{sx:{color:"white"},label:"26_도서관",...p(26)}),(0,s.jsx)(i.Z,{sx:{color:"white"},label:"27️_코딩 규칙 이동",...p(27)}),(0,s.jsx)(i.Z,{sx:{color:"white"},label:"\uD83E\uDD28 tutorial",...p(28)})]}),(0,s.jsx)(j,{value:t,index:0,children:(0,s.jsx)(h,{})}),(0,s.jsx)(j,{value:t,index:1,children:(0,s.jsx)(g,{})}),(0,s.jsx)(j,{value:t,index:2,children:(0,s.jsx)(M,{})}),(0,s.jsx)(j,{value:t,index:3,children:(0,s.jsx)(C,{})}),(0,s.jsx)(j,{value:t,index:4,children:(0,s.jsx)(D,{})}),(0,s.jsx)(j,{value:t,index:5,children:(0,s.jsx)(F,{})}),(0,s.jsx)(j,{value:t,index:6,children:(0,s.jsx)(E,{})}),(0,s.jsx)(j,{value:t,index:7,children:(0,s.jsx)(k,{})}),(0,s.jsx)(j,{value:t,index:8,children:(0,s.jsx)(z,{})}),(0,s.jsx)(j,{value:t,index:9,children:(0,s.jsx)(O,{})}),(0,s.jsx)(j,{value:t,index:10,children:(0,s.jsx)(X,{})}),(0,s.jsx)(j,{value:t,index:11,children:(0,s.jsx)(N,{})}),(0,s.jsx)(j,{value:t,index:12,children:(0,s.jsx)(P,{})}),(0,s.jsx)(j,{value:t,index:13,children:"5"}),(0,s.jsx)(j,{value:t,index:14,children:"5"}),(0,s.jsx)(j,{value:t,index:15,children:"5"}),(0,s.jsx)(j,{value:t,index:16,children:"16장"}),(0,s.jsx)(j,{value:t,index:17,children:"16장"}),(0,s.jsx)(j,{value:t,index:18,children:"16장"}),(0,s.jsx)(j,{value:t,index:19,children:"16장"}),(0,s.jsx)(j,{value:t,index:20,children:"16장"}),(0,s.jsx)(j,{value:t,index:21,children:"16장"}),(0,s.jsx)(j,{value:t,index:22,children:"16장"}),(0,s.jsx)(j,{value:t,index:23,children:"16장"}),(0,s.jsx)(j,{value:t,index:24,children:"16장"}),(0,s.jsx)(j,{value:t,index:25,children:"16장"}),(0,s.jsx)(j,{value:t,index:26,children:"16장"}),(0,s.jsx)(j,{value:t,index:27,children:"마지막"}),(0,s.jsx)(j,{value:t,index:28,children:"튜토리얼"})]})})]})}}},function(e){e.O(0,[939,774,888,179],function(){return e(e.s=48312)}),_N_E=e.O()}]);