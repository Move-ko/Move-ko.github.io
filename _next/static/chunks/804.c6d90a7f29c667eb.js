"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[804],{4804:function(t,n,e){e.r(n);var o=e(85893),r=e(41181),s=e(15861),i=e(87357),l=e(7906),a=e(295),c=e(98102),d=e(89755),x=e(72882),u=e(53184),h=e(53816),m=e(90629),p=e(90948),j=e(38154);n.default=()=>{let t=(0,p.ZP)(c.Z)(t=>{let{theme:n}=t;return{["&.".concat(d.Z.head)]:{backgroundColor:" #171B1C",color:n.palette.common.white},["&.".concat(d.Z.body)]:{fontSize:12}}}),n=(0,p.ZP)(h.Z)(t=>{let{theme:n}=t;return{"&:nth-of-type(odd)":{backgroundColor:n.palette.common.white,color:n.palette.common.white},"&:last-child td, &:last-child th":{border:0}}});return(0,o.jsx)(r.ZP,{container:!0,children:(0,o.jsxs)(r.ZP,{xs:12,children:[(0,o.jsx)(i.Z,{sx:{width:"100%"},children:(0,o.jsx)(s.Z,{variant:"h3",gutterBottom:!0,children:"평등"})}),(0,o.jsx)(i.Z,{sx:{width:"100%",textAlign:"left",marginTop:"30px"},children:(0,o.jsx)(s.Z,{variant:"body1",gutterBottom:!0,children:"Move는 ==와 !=라는 두 가지 동등성 연산을 지원합니다."})}),(0,o.jsx)(x.Z,{component:m.Z,children:(0,o.jsxs)(l.Z,{sx:{width:"100%"},"aria-label":"customized table",children:[(0,o.jsx)(u.Z,{children:(0,o.jsxs)(h.Z,{children:[(0,o.jsx)(t,{children:"통사론"}),(0,o.jsx)(t,{children:"타입"}),(0,o.jsx)(t,{children:"설명"})]})}),(0,o.jsx)(a.Z,{component:"div",children:[{통사론:"==",작업:"qual",설명:"만약 두 피연산자가 동일한 값을 가지고 있다면 true를 반환하고, 그렇지 않으면 false를 반환합니다."},{통사론:"!=",작업:"not qual",설명:"만약 두 피연산자가 서로 다른 값을 가지고 있다면 true를 반환하고, 그렇지 않으면 false를 반환합니다."}].map(e=>(0,o.jsxs)(n,{children:[(0,o.jsx)(t,{children:null==e?void 0:e.통사론}),(0,o.jsx)(t,{children:null==e?void 0:e.작업}),(0,o.jsx)(t,{children:null==e?void 0:e.설명})]}))})]})}),(0,o.jsx)(i.Z,{sx:{width:"100%",marginTop:"30px"},children:(0,o.jsx)(s.Z,{variant:"h4",gutterBottom:!0,children:"타이핑"})})," ",(0,o.jsx)(i.Z,{sx:{width:"100%",textAlign:"left",marginTop:"30px"},children:(0,o.jsx)(s.Z,{variant:"body1",gutterBottom:!0,children:"같음(==) 및 같지 않음(!=) 연산은 두 피연산자가 동일한 유형이어야만 작동합니다."})}),(0,o.jsx)(j.Z,{code:'  0 == 0; //true\n  1u128 == 2u128; //false\n  b"hello" != x"00"; //true\n'}),(0,o.jsx)(i.Z,{sx:{width:"100%",textAlign:"left",marginTop:"30px"},children:(0,o.jsx)(s.Z,{variant:"body1",gutterBottom:!0,children:"사용자 정의된 유형에 대해서도 같음(==)과 같지 않음(!=) 연산이 작동합니다!"})}),(0,o.jsx)(j.Z,{code:'  address 0x42 {\n    module example {\n        struct S has copy,drop {\n            f:u64,\n            s:vector<u8>\n        }\n        fun alwats_true():bool {\n            let s= S {\n                f:0,\n                s:b""\n            };\n            //괄호는 필요하지 않지만 이 예시에서 명확성을 위해 추가되었습니다.\n            (copy s) == s\n        }\n        fun alwats_false():bool {\n            let s = S {\n                f:0,\n                s:b""\n            };\n            //괄호는 필요하지 않지만 이 예시에서 명확성을 위해 추가되었습니다.\n            (copy s) != s\n        }\n    }\n}\n'}),(0,o.jsx)(i.Z,{sx:{width:"100%",textAlign:"left",marginTop:"30px"},children:(0,o.jsx)(s.Z,{variant:"body1",gutterBottom:!0,children:"피연산자가 서로 다른 유형을 가지고 있다면, 유형 검사 오류가 발생합니다."})}),(0,o.jsx)(j.Z,{code:"  1u8 == 1u128; // 오류!\n  //     ^^^^^ 'u8' 유형의 인수가 필요합니다.\n  b\"\" != 0; // 오류!\n  //     ^ 'vector<u8>' 유형의 인수가 필요합니다.\n"}),(0,o.jsx)(i.Z,{sx:{width:"100%",marginTop:"30px"},children:(0,o.jsx)(s.Z,{variant:"h4",gutterBottom:!0,children:"참조를 사용한 유형 지정"})}),(0,o.jsx)(i.Z,{sx:{width:"100%",textAlign:"left",marginTop:"30px"},children:(0,o.jsx)(s.Z,{variant:"body1",gutterBottom:!0,children:"참조를 비교할 때 참조의 유형(불변 또는 가변)은 중요하지 않습니다. 즉, 동일한 기저 유형의 불변한 & 참조와 가변한 &mut 참조를 비교할 수 있습니다."})}),(0,o.jsx)(j.Z,{code:"  module example::test {\n    fun main(){\n        let i = &0;\n        let n = &mut 1;\n        i == m;//false\n        m == i;//false\n        m == m;//true\n        i == i;//true\n    }\n}\n"}),(0,o.jsx)(i.Z,{sx:{width:"100%",textAlign:"left",marginTop:"30px"},children:(0,o.jsx)(s.Z,{variant:"body1",gutterBottom:!0,children:"위 내용은 필요한 경우 각 가변 참조에 명시적인 freeze를 적용하는 것과 동일합니다."})}),(0,o.jsx)(j.Z,{code:"  module example::test {\n    fun main(){\n        let i = &0;\n        let m = &mut 1;\n\n        i == freeze(m); //false\n        freeze(m) == i;//false\n        m == m;//true\n        i == i;//true\n    }\n}\n"}),(0,o.jsx)(i.Z,{sx:{width:"100%",textAlign:"left",marginTop:"30px"},children:(0,o.jsx)(s.Z,{variant:"body1",gutterBottom:!0,children:"다시 말씀드리면, 기저 유형은 동일한 유형이어야 합니다."})}),(0,o.jsx)(j.Z,{code:"  module example::test {\n    fun main(){\n        let i = &0;\n        let s = &b\"\";\n\n        i == s;//오류\n        //   ^ '&u64' 유형의 인수가 필요합니다.\n    }\n}\n"}),(0,o.jsx)(i.Z,{sx:{width:"100%",marginTop:"30px"},children:(0,o.jsx)(s.Z,{variant:"h4",gutterBottom:!0,children:"제약사항(제한 사항)"})}),(0,o.jsx)(i.Z,{sx:{width:"100%",textAlign:"left",marginTop:"30px"},children:(0,o.jsx)(s.Z,{variant:"body1",gutterBottom:!0,children:"== 및 != 모두 비교 시 값을 소비합니다. 결과적으로, 유형 시스템은 해당 유형이 drop을 가져야 한다는 사실을 강제합니다. drop 능력이 없으면 함수가 종료될 때 소유권이 전달되어야 하며, 이러한 값은 선언된 모듈 내에서 명시적으로만 파괴될 수 있습니다. 이러한 값들이 직접적으로 == 또는 !=와 함께 사용된다면 값이 파괴되어 drop 능력의 안전성 보장이 깨질 것입니다!"})}),(0,o.jsx)(j.Z,{code:"  address 0x42 {\n    module example {\n        struct Coin has store {\n            value: u64\n        }\n        fun invalid(c1:Coin,c2:Coin){\n            c1 == c2 //오류발생!!\n    //      ^^    ^^ 이러한 리소스들이 파괴될 것입니다!\n        }\n    }\n}\n"}),(0,o.jsx)(i.Z,{sx:{width:"100%",textAlign:"left",marginTop:"30px"},children:(0,o.jsx)(s.Z,{variant:"body1",gutterBottom:!0,children:"그러나, 프로그래머는 값을 직접 비교하는 대신 값이 먼저 대여될 수 있으며, 참조 유형은 drop 기능을 가지고 있습니다. 예를 들어, 다음과 같습니다:"})}),(0,o.jsx)(j.Z,{code:"  address 0x42 {\n    module example {\n        struct Coin as store {\n            value:u64\n        }\n        fun swap_if_equal(c1:Coin,c2:Coin):(Coin,Coin) {\n            let are_equal = &c1 == &c2 ; //유효\n            if (are_equal) (c2,c1) else (c1,c2)\n        }\n    }\n}\n"}),(0,o.jsx)(i.Z,{sx:{width:"100%",marginTop:"30px"},children:(0,o.jsx)(s.Z,{variant:"h4",gutterBottom:!0,children:"추가적인 복사는 피해야 합니다"})}),(0,o.jsx)(i.Z,{sx:{width:"100%",textAlign:"left",marginTop:"30px"},children:(0,o.jsx)(s.Z,{variant:"body1",gutterBottom:!0,children:"프로그래머는 drop이 있는 모든 유형의 값을 비교할 수 있지만, 복사 비용이 큰 경우 참조를 사용하여 비교하는 것이 좋습니다."})}),(0,o.jsx)(j.Z,{code:"  module example::test {\n    fun main(){\n        let v1: vector<u8>= function_that_returns_vector();\n        let v2: vector<u8>= function_that_returns_vector();\n        assert!(copy v1 == copy v2, 42);\n         //     ^^^^       ^^^^\n        use_two_vectors(v1,v2);\n\n        let s1: Foo = function_that_returns_large_struct();\n        let s2: Foo = function_that_returns_large_struct();\n        assert!(copy s1 == copy s2, 42);\n         //     ^^^^       ^^^^\n        use_two_foos(s1, s2);\n    }\n}\n"}),(0,o.jsx)(i.Z,{sx:{width:"100%",textAlign:"left",marginTop:"30px"},children:(0,o.jsx)(s.Z,{variant:"body1",gutterBottom:!0,children:"이 코드는 완벽하게 허용됩니다 (Foo가 drop을 가진다고 가정할 때), 그러나 효율적이지는 않습니다. 강조된 복사본은 제거되고 대신 참조를 사용할 수 있습니다."})}),(0,o.jsx)(j.Z,{code:"  module example::test {\n    fun main(){\n        let v1: vector<u8> = function_that_returns_vector();\n        let v12 vector<u8> = function_that_returns_vector();\n        assert!(&v1 == &v2, 42);\n        //     ^      ^\n        use_two_vectors(v1, v2);\n\n\n        let s1:Foo= function_that_returns_large_struct();\n        let s2:Foo= function_that_returns_large_struct();\n        assert!(&s1 == &s2, 42);\n        //     ^      ^\n        use_two_foos(s1, s2);\n    }\n}\n"}),(0,o.jsx)(i.Z,{sx:{width:"100%",textAlign:"left",marginTop:"30px"},children:(0,o.jsx)(s.Z,{variant:"body1",gutterBottom:!0,children:"== 연산 자체의 효율성은 동일하지만, 복사본은 제거되어 프로그램이 더 효율적이게 됩니다."})})]})})}},38154:function(t,n,e){e.d(n,{Z:function(){return c}});var o=e(85893),r=e(74855),s=e(34209),i=e(84283),l=e(90066),a=e(67294);function c(t){let{code:n}=t,[e,c]=(0,a.useState)(!1),[d,x]=(0,a.useState)(!1),[u,h]=(0,a.useState)(!1);return(0,o.jsxs)("div",{style:{position:"relative"},onMouseEnter:()=>{x(!0)},onMouseLeave:()=>{x(!1)},children:[(0,o.jsx)(s.Z,{language:"javascript",style:i.cL,children:n}),(0,o.jsx)(r.CopyToClipboard,{text:n,children:(0,o.jsx)("button",{onClick:()=>{console.log("코드가 복사되었습니다."),c(!0),h(!0),setTimeout(()=>{c(!1),h(!1)},1e3)},style:{position:"absolute",top:"0",right:"0",margin:"8px",padding:"8px",background:"none",border:"none",cursor:"pointer",opacity:d?1:0,transition:"opacity 0.3s",display:"flex",alignItems:"center"},children:u?(0,o.jsx)(l.Z,{style:{color:"#fff",transition:"color 0.3s"}}):(0,o.jsx)(l.Z,{style:{color:e?"#fff":"#000",transition:"color 0.3s"}})})})]})}}}]);